const { Events ,EmbedBuilder, Colors, ActionRowBuilder, ButtonBuilder } = require('discord.js')
const fs = require('fs')
const { game_table } = require('../functions/listFunc.js')



module.exports = {
    name: Events.ClientReady,
    once: true,

    async execute(client) {
        console.log(`${client.user.tag} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!`);
        client.user.setActivity(`üëâüëåüí¶`);
        client.user.setStatus('idle');
        const message = new EmbedBuilder()
            .setTitle('üü¢ –ë–æ—Ç –±—ã–ª –∑–∞–ø—É—â–µ–Ω!')
            .setDescription('–ë–æ—Ç –±—ã–ª –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å.')
            .setColor(Colors.Green)
            .setTimestamp(Date.now())

        await client.channels.cache.get("1060771841452560507")
            .send({
                content: '<@1060761793204596846> –∑–∞–ø—É—Å—Ç–∏–ª—Å—è', components: [
                    new ActionRowBuilder().addComponents([
                        new ButtonBuilder().setCustomId('happyMessage').setLabel('üéâ –ü–æ–∑—Ä–∞–≤–ª—è—é').setStyle(3),
                        new ButtonBuilder().setCustomId('restartButton').setLabel('üîÅ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å').setStyle(1),
                        new ButtonBuilder().setCustomId('stopButton').setLabel('üõë –í—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞').setStyle(4)
                    ])
                ], embeds: [message]
            })
            async function updateList() {
                const json = JSON.parse(fs.readFileSync('./src/dataBase/bot.json'));
                const messageId = json.message_list_id;
                let channel = await client.channels.cache.get("1061827241031508121");
                let message = await channel.messages.fetch(messageId.id).catch(err => {
                    console.error(err);
                });
                const embed_components = {
                    embeds: [new EmbedBuilder()
                        .setTitle('üìú –°–ø–∏—Å–æ–∫ –∏–≥—Ä')
                        .setDescription(`–°–ø–∏—Å–æ–∫ –∏–≥—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n${game_table()}\n–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∫–∞–∂–¥—ã–π —Ä–∞–∑ –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å —Å–ø–∏—Å–∫–∞–º–∏. –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ <#1060755559231524954>`)
                        .setColor(Colors.Green)
                        .setTimestamp(Date.now())], components: [new ActionRowBuilder()
                            .addComponents([
                                new ButtonBuilder()
                                    .setCustomId('start_confern_1')
                                    .setLabel('üöÄ –ù–∞—á–∞—Ç—å —Å–æ–±—Ä–∞–Ω–∏–µ')
                                    .setStyle('3'),
                                new ButtonBuilder()
                                    .setCustomId('plan_confern_1')
                                    .setDisabled(true)
                                    .setLabel('‚è≥ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—Ä–∞–Ω–∏–µ')
                                    .setStyle('1'),
                                new ButtonBuilder()
                                    .setCustomId('photo_confern')
                                    .setDisabled(true)
                                    .setLabel('üì∏ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ')
                                    .setStyle('1')
                            ])]
                }
                if (!message) {
                    message = await channel.send(embed_components);
                    json.message_list_id = message;
            
                    fs.writeFileSync('./src/dataBase/bot.json', JSON.stringify(json));
                    await message.startThread({
                        name: 'üìô List logs',
                        autoArchiveDuration: 60,
                        reason: '–õ–æ–≥–∏ —Å–ø–∏—Å–∫–∞, –ø—Ä–æ—Å—å–±–∞ —Å—é–¥–∞ –Ω–µ –ø–∏—Å–∞—Ç—å.\n\nüü¢ - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫\nüî¥ - –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞',
                    });
                    await message.thread.send('–ù–∞—á–∞–ª–æ –ª–æ–≥–æ–≤!')
                } else {
                    message.edit(embed_components);
                }
            }
        await updateList()
    },
};

