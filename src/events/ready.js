const { Events, EmbedBuilder, Colors, ActionRowBuilder, ButtonBuilder, TextInputStyle, ButtonStyle } = require('discord.js')
const fs = require('fs')
const { game_table } = require('../functions/listFunc.js')
const { Configuration, OpenAIApi } = require("openai");

const configuration = new Configuration({
    apiKey: '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',
});

const openai = new OpenAIApi(configuration);

const ChartJSImage = require('chart.js-image');
const { fileLog } = require('../functions/logs.js');
const { endVote } = require('../functions/endVote')


module.exports = {
    name: Events.ClientReady,
    once: true,

    async execute(client) {
        console.log(`${client.user.tag} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!`);
        client.user.setActivity(`üëâüëåüí¶`);
        client.user.setStatus('idle');
        const message = new EmbedBuilder()
            .setTitle('üü¢ –ë–æ—Ç –±—ã–ª –∑–∞–ø—É—â–µ–Ω!')
            .setDescription('–ë–æ—Ç –±—ã–ª –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å.')
            .setColor(Colors.Green)
            .setTimestamp(Date.now())

        await client.channels.cache.get("1060771841452560507")
            .send({
                content: '<@1060761793204596846> –∑–∞–ø—É—Å—Ç–∏–ª—Å—è', components: [
                    new ActionRowBuilder().addComponents([
                        new ButtonBuilder().setCustomId('happyMessage').setLabel('üéâ –ü–æ–∑—Ä–∞–≤–ª—è—é').setStyle(3),
                        new ButtonBuilder().setCustomId('restartButton').setLabel('üîÅ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å').setStyle(1),
                        new ButtonBuilder().setCustomId('stopButton').setLabel('üõë –í—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞').setStyle(4)
                    ])
                ], embeds: [message]
            })


    
        // check votes
        async function cheakVotes() {
            // check time to end vote
            let data = JSON.parse(fs.readFileSync('./src/dataBase/bot.json', 'utf8')).votes
            const users = fs.readdirSync('./src/dataBase/users')
            data.forEach(async e => {
                if (e.votes_users.length == users.length) {
                    console.log(`–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏, –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ ${e.id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ`);
                    await endVote(e.id, client)
                }
                switch (e.time) {
                    case '1m': { if (Date.now() - e.startVote >=   60000 ) { await endVote(e.id, client) } break; }
                    case '5m': { if (Date.now() - e.startVote >=   300000 ) { await endVote(e.id, client) } break; }
                    case '10m': { if (Date.now() - e.startVote >=  600000 ) { await endVote(e.id, client) } break; }
                    case '30m': { if (Date.now() - e.startVote >=  1800000 ) { await endVote(e.id, client) } break; }
                    case '1h': { if (Date.now() - e.startVote >=   3600000 ) { await endVote(e.id, client) } break; }
                    case '2h': { if (Date.now() - e.startVote >=   7200000 ) { await endVote(e.id, client) } break; }
                    case '6h': { if (Date.now() - e.startVote >=   21600000 ) { await endVote(e.id, client) } break; }
                    case '12h': { if (Date.now() - e.startVote >=  43200000 ) { await endVote(e.id, client) } break; }
                    case '1d': { if (Date.now() - e.startVote >=   86400000 ) { await endVote(e.id, client) } break; }
                    case '2d': { if (Date.now() - e.startVote >=   172800000 ) { await endVote(e.id, client) } break; }
                    case '3d': { if (Date.now() - e.startVote >=   259200000 ) { await endVote(e.id, client) } break; }
                    case '4d': { if (Date.now() - e.startVote >=   345600000 ) { await endVote(e.id, client) } break; }
                    case '5d': { if (Date.now() - e.startVote >=   432000000 ) { await endVote(e.id, client) } break; }
                    case '6d': { if (Date.now() - e.startVote >=   518400000 ) { await endVote(e.id, client) } break; }
                    case '7d': { if (Date.now() - e.startVote >=   604800000 ) { await endVote(e.id, client) } break; }
                }
            })
        }; cheakVotes() 

        async function updateList() {
            const json = JSON.parse(fs.readFileSync('./src/dataBase/bot.json'));
            const messageId = json.message_list_id;
            let channel = await client.channels.cache.get("1061827241031508121");
            let message = await channel.messages.fetch(messageId.id).catch(err => {
                console.error(err);
            });
            const gameTable = await game_table()

            let user_name_description = [];
            gameTable[0].forEach((user, i) => user_name_description.push({ name: user, value: `\`\`\`js\n${gameTable[1][i]}\`\`\``, inline: true }))

            const embed_components = {
                embeds: [
                    new EmbedBuilder()
                        .setTitle('üßëüèæ‚Äç‚ù§Ô∏è‚Äçüßëüèø –°–ø–∏—Å–æ–∫ –∏–≥—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
                        .addFields(user_name_description)
                        .setColor(Colors.Green)
                    ,
                    new EmbedBuilder()
                        .setTitle('üñ•Ô∏è –ü–ö –∏–≥—Ä—ã')
                        .setDescription(gameTable[2] + gameTable[3])
                        .setColor(Colors.Green)
                        .setTimestamp(Date.now())
                    ,
                    new EmbedBuilder()
                        .setTitle(`‚åõ –ö–æ—Ä–æ—Ç–∫–∞—è –∏—Å—Ç–æ—Ä–∏—è:`)
                        .setColor(Colors.Green)
                        .setDescription(`${gameTable[4]}**–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–ø–∏—Å–∫–∞:**\n\`/list add \${game} ?{android} ?{user}\` - –î–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫ –∏–≥—Ä—É, –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ \`,\`. –ü–∏—Å–∞—Ç—å 1 –≤ 1, –∫—Ä–æ–º–µ –±–æ–ª—å—à–∏—Ö –±—É–∫–≤ –Ω–∞ –Ω–∏—Ö –ø–æ—Ñ–∏–≥\n\`/list remove\` - –£–¥–∞–ª–∏—Ç—å –∏–≥—Ä—ã –∏–∑ —Å–ø–∏—Å–∫–∞, –≤—ã–±—Ä–∞—Ç—å –∏–∑ –º–µ–Ω—é.\n\`android\` - –º–æ–∂–µ—Ç –±—ã—Ç—å true –∏–ª–∏ false, –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ flase.\n\`user\` - –≤–ª–∏—è—Ç—å –Ω–∞ —á—É–∂–æ–π —Å–ø–∏—Å–æ–∫ –∏–≥—Ä.`)
                    ,
                    new EmbedBuilder()
                        .setTitle(`üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏`)
                        .setColor(Colors.Aqua)
                        .setDescription(`–°–º–æ—Ç—Ä—è –Ω–∞ —Å–ø–∏—Å–æ–∫, —è –º–æ–≥—É –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å —Ç–∞–∫–∏–µ –∏–≥—Ä—ã: \n\`\`\`${json.recomend}\`\`\``)
                ], components: [new ActionRowBuilder()
                    .addComponents([
                        new ButtonBuilder()
                            .setCustomId('start_confern_1')
                            .setLabel('üöÄ –ù–∞—á–∞—Ç—å —Å–æ–±—Ä–∞–Ω–∏–µ')
                            .setStyle('3'),
                        new ButtonBuilder()
                            .setCustomId('plan_confern_1')
                            .setDisabled(true)
                            .setLabel('‚è≥ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—Ä–∞–Ω–∏–µ')
                            .setStyle('1'),
                        new ButtonBuilder()
                            .setCustomId('photo_confern')
                            .setDisabled(true)
                            .setLabel('üì∏ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ')
                            .setStyle('1')
                    ])]
            }
            if (!message) {
                message = await channel.send(embed_components);
                json.message_list_id = message;

                fs.writeFileSync('./src/dataBase/bot.json', JSON.stringify(json));
                await message.startThread({
                    name: 'üìô List logs',
                    autoArchiveDuration: 60,
                    reason: '–õ–æ–≥–∏ —Å–ø–∏—Å–∫–∞, –ø—Ä–æ—Å—å–±–∞ —Å—é–¥–∞ –Ω–µ –ø–∏—Å–∞—Ç—å.\n\nüü¢ - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫\nüî¥ - –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞',
                });
                await message.thread.send('–ù–∞—á–∞–ª–æ –ª–æ–≥–æ–≤!')
            } else {
                message.edit(embed_components);
            }
        }
        await updateList()

        async function updateState() {
            async function generateChart(dates, days, mounth) {
                let time = [];
                // times.forEach(element => {
                //     time.push((element/60000).toString())
                // });
                let colors = [
                    [255, 0, 0],      // –∫—Ä–∞—Å–Ω—ã–π
                    [255, 165, 0],    // –æ—Ä–∞–Ω–∂–µ–≤—ã–π
                    [255, 255, 0],    // –∂–µ–ª—Ç—ã–π
                    [0, 128, 0],      // –∑–µ–ª–µ–Ω—ã–π
                    [0, 255, 255],    // –≥–æ–ª—É–±–æ–π
                    [0, 0, 255],      // —Å–∏–Ω–∏–π
                    [128, 0, 128],    // –ø—É—Ä–ø—É—Ä–Ω—ã–π
                    [255, 0, 255],    // —Ñ—É–∫—Å–∏—è
                    [128, 128, 128],  // —Å–µ—Ä—ã–π
                    [192, 192, 192],  // —Å–µ—Ä–µ–±—Ä—è–Ω—ã–π
                    [139, 69, 19],    // –∫–æ—Ä–∏—á–Ω–µ–≤—ã–π
                    [255, 192, 203],  // —Ä–æ–∑–æ–≤—ã–π
                    [128, 0, 0],      // —Ç–µ–º–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π
                    [139, 0, 139],    // —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
                    [0, 128, 128],    // —Ç–µ–º–Ω—ã–π –≥–æ–ª—É–±–æ–π
                    [0, 0, 128],      // —Ç–µ–º–Ω–æ-—Å–∏–Ω–∏–π
                    [0, 0, 0],        // —á–µ—Ä–Ω—ã–π
                    [255, 69, 0],     // –æ—Ä–∞–Ω–∂–µ–≤–æ-–∫—Ä–∞—Å–Ω—ã–π
                    [255, 215, 0],    // –∑–æ–ª–æ—Ç–æ–π
                    [0, 255, 127],    // —è—Ä–∫–æ-–∑–µ–ª–µ–Ω—ã–π
                    [30, 144, 255],   // —Å—Ç–∞–ª—å–Ω–æ–π —Å–∏–Ω–∏–π
                    [255, 20, 147],   // —Ä–æ–∑–æ–≤—ã–π
                    [70, 130, 180],   // –≥–æ–ª—É–±–æ–π —Å—Ç–∞–ª—å
                    [240, 128, 128],  // —Å–≤–µ—Ç–ª–æ-–∫—Ä–∞—Å–Ω—ã–π
                    [0, 255, 255],    // —è—Ä–∫–æ-–≥–æ–ª—É–±–æ–π
                    [221, 160, 221],  // —Å–≤–µ—Ç–ª–æ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
                    [46, 139, 87],    // –º–æ—Ä—Å–∫–æ–π –≤–æ–ª–Ω—ã
                    [255, 99, 71]     // —Ç–æ–º–∞—Ç–Ω—ã–π
                ]
                function generateRandomColor(alpha) {
                    const colori = Math.floor(Math.random() * colors.length)
                    let color
                    if (alpha) {
                        color = `rgba(${colors[colori]}, 0.2)`;
                    } else {
                        color = `rgb(${colors[colori]})`;
                        colors.splice(colori, 1)
                    }
                    return color;
                }

                let botUsers = []

                const users = fs.readdirSync(`./src/dataBase/users`)

                users.forEach(e => {
                    let user = JSON.parse(fs.readFileSync(`./src/dataBase/users/${e}`))

                    for (let i = 0; user.state.length <= days; i++) {
                        user.state.unshift(0)
                    }

                    const arr = user.state.splice(-days).map(e => { return e / 60000 / 60 })
                    botUsers.push(
                        {
                            type: "line",
                            label: `${user.userName}`,
                            borderColor: generateRandomColor(),
                            backgroundColor: generateRandomColor(true),
                            data: arr
                        }
                    )
                })

                let bot = JSON.parse(fs.readFileSync(`./src/dataBase/bot.json`))

                for (let i = 0; bot.state.length <= days; i++) {
                    bot.state.unshift(0)
                }

                const arr = bot.state.splice(-days).map(e => { return e / 60000 / 60 })
                botUsers.push(
                    {
                        type: "bar",
                        label: "–û–±—â–µ–µ –≤—Ä–µ–º—è –∏–≥—Ä—ã",
                        borderColor: "rgba(255, 99,132)",
                        backgroundColor: "rgb(255, 192, 203)",
                        data: arr
                    }
                )

                const line_chart = ChartJSImage().chart({
                    type: "bar",

                    options: {
                        plugins: {
                            title: {
                                display: true,
                                text: 'KayFen'
                            },
                        },
                        responsive: true,
                        scales: {
                            x: {
                                stacked: true,
                            },
                            y: {
                                stacked: true
                            }
                        }
                    },
                    data: {

                        labels: dates,
                        datasets: botUsers
                        // {
                        //     type: "line",
                        //     label: "–ë–æ—Ä–∏—Å",
                        //     borderColor: "rgb(255, 99,132)",
                        //     backgroundColor: "rgba(255, 99, 132, 0.5)",
                        //     data: time
                        // },
                        // {
                        //     type: "line",
                        //     label: "–î–µ–Ω–∏—Å",
                        //     borderColor: "rgba(255, 99,132)",
                        //     backgroundColor: "rgba(0, 0, 0, 0.5)",
                        //     data: [0,3,0,20]
                        // },
                    },


                }) // Line chart
                    .backgroundColor('rgba(255,255,255,1)')
                    .width(500) // 500px
                    .height(300); // 300px
                const buffer = line_chart.toBuffer('image/png');
                return buffer
            }
            function getLastNDays(n) {
                const dates = [];
                for (let i = n - 1; i >= 0; i--) {
                    const date = new Date();
                    date.setDate(date.getDate() - i);
                    const day = ("0" + date.getDate()).slice(-2);
                    const month = ("0" + (date.getMonth() + 1)).slice(-2);
                    const formattedDate = `${day}.${month}`;
                    dates.push(formattedDate);
                }
                return dates;
            }
            const imge = await generateChart(getLastNDays(7), 7, false);

            const json = JSON.parse(fs.readFileSync('./src/dataBase/bot.json'));
            let channel = await client.channels.cache.get("1061911188528693358");
            let message

            const users = fs.readdirSync(`./src/dataBase/users`)
            let users_time = ``
            let total_time = 0

            json.state.forEach(e => {
                total_time += e
            })

            users.forEach(e => {
                let user = JSON.parse(fs.readFileSync(`./src/dataBase/users/${e}`))
                let user_time = 0
                user.state.forEach((e) => {
                    user_time += e
                })
                users_time += `**${user.userName}:** \`${Math.round(user_time / 60000 / 60)}—á, ${Math.round(user_time / 60000 % 60)}–º\`\n`
            })

            const messageId = json.message_stats;
            if (messageId !== null) {
                message = await channel.messages.fetch(messageId.id).catch(err => {
                    console.error(err);
                });
            } else {
                message = false
            }
            const avg = json.state.splice(-8).splice(1).reduce((acc, curr) => (curr !== Infinity ? acc + curr : acc), 0) / 8;

            const embed_components = {
                embeds: [new EmbedBuilder()
                    .setTitle('üìà –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏')
                    .setDescription(`–ì—Ä–∞—Ñ–∏–∫ –æ–±–Ω–æ–≤–ª—è–µ—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç, —É –∫–∞–∂–¥–æ–≥–æ –±—É–¥–µ—Ç —Å–≤–æ–π —Ä–∞–Ω–¥–æ–º–Ω—ã–π —Ü–≤–µ—Ç –∫–æ—Ç–æ—Ä—ã–π —Ç–æ–∂–µ –º–µ—Å—è–µ—Ç—Å—å—è, —è—Ä–∫–æ –∑–µ–ª—ë–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç —ç—Ç–æ –æ–±—â–µ–µ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏(–°–æ–±—Ä–∞–Ω–∏–π)\n **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è:** \n${users_time}**–í—Ä–µ–º—è —Å–æ–±—Ä–∞–Ω–∏–π:** \`${Math.round(total_time / 60000 / 60)}—á, ${Math.round(total_time / 60000 % 60)}–º\`\n\n**–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Å–æ–±—Ä–∞–Ω–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é:** \`${Math.round(avg / 60000 / 60)}—á, ${Math.round(avg / 60000 % 60)}–º\``)
                    .setColor(Colors.Green)
                    .setTimestamp(Date.now())
                ], components: [new ActionRowBuilder()
                    .addComponents([
                        new ButtonBuilder()
                            .setCustomId('stat_week')
                            .setLabel('–∑–∞ –Ω–µ–¥–µ–ª—é')
                            .setStyle(ButtonStyle.Primary)
                            .setDisabled(true),
                        new ButtonBuilder()
                            .setCustomId('stat_mounth')
                            .setLabel('–∑–∞ –º–µ—Å—è—Ü')
                            .setStyle(ButtonStyle.Secondary)
                            .setDisabled(true),
                        new ButtonBuilder()
                            .setCustomId('stat_Xmounth')
                            .setLabel('–∑–∞ 3 –º–µ—Å—è—Ü—è')
                            .setStyle(ButtonStyle.Secondary)
                            .setDisabled(true),
                        new ButtonBuilder()
                            .setCustomId('stat_year')
                            .setLabel('–∑–∞ –≥–æ–¥')
                            .setStyle(ButtonStyle.Secondary)
                            .setDisabled(true)
                    ])], files: [await imge]
            }
            if (!message) {
                message = await channel.send(embed_components);
                json.message_stats = message;

                fs.writeFileSync('./src/dataBase/bot.json', JSON.stringify(json));
            } else {
                message.edit(embed_components);
            }
        }
        updateState()
        setInterval(() => {
            cheakVotes()
            updateState()
        }, 300000)

        async function updateRegister() {
            const json = JSON.parse(fs.readFileSync('./src/dataBase/bot.json'));
            let channel = await client.channels.cache.get("1061827016518815845");
            let message

            const messageId = json.message_register_id;
            if (messageId !== null) {
                message = await channel.messages.fetch(messageId.id).catch(err => {
                    console.error(err);
                });
            } else {
                message = false
            }
            const gameTable = await game_table()

            let user_name_description = [];
            gameTable[0].forEach((user, i) => user_name_description.push({ name: user, value: `\`\`\`js\n${gameTable[1][i]}\`\`\``, inline: true }))


            const embed_components = {
                embeds: [new EmbedBuilder()
                    .setTitle('üê∏ –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É ü™™')
                    .setDescription(`**–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ö–∞–∂–∞–±—É, —ç—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—â–µ–Ω–∏—è!**\n\n–û—Å–Ω–æ–≤–Ω–∞—è —Å—É—Ç—å —Ö–∞–∂–∞–±—ã —ç—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–∏–π, –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–æ–≤(–≤—Å–µ –∏–≥—Ä—ã –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å —É —Ä–∞–∑–Ω—ã—Ö –ª—é–¥–µ–π), –≥–æ–ª–æ—Å–æ–≤—ã–µ —Ñ–∏—à–∫–∏, –Ω–æ–≤–æ—Å—Ç–∏ –æ —Ä–∞–∑–¥–∞—á–∞—Ö –∏–≥—Ä –∏ —Ç–∞–∫ –∂–µ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏.\n–í—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ –±–æ—Ç–∞ <@1060761793204596846>, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ –µ—Å—Ç—å –∫–∞–Ω–∞–ª *–µ—Å–ª–∏ –±–æ—Ç –∑–¥–æ—Ö*. –ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –±–ª–∞–≥–æ–¥–∞—Ä—è —á–µ–º—É –æ–Ω –º–æ–∂–µ—Ç –ø–æ–º–æ–≥–∞—Ç—å –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –º–Ω–æ–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏.\n\n–í–æ—Ç –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∏ –∏—Ö –∏–≥—Ä—ã, –º–± –∫–æ–º—É-—Ç–æ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è:\n`)
                    .addFields(user_name_description)
                    .setColor(Colors.Green)
                    .setTimestamp(Date.now()),
                new EmbedBuilder()
                    .setTitle('üñ•Ô∏è –ü–ö –∏–≥—Ä—ã')
                    .setDescription(gameTable[2] + gameTable[3])
                    .setColor(Colors.Green)
                    .setTimestamp(Date.now())
                ], components: [new ActionRowBuilder()
                    .addComponents([
                        new ButtonBuilder()
                            .setCustomId('register')
                            .setLabel('‚úçÔ∏è –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É')
                            .setStyle('3')
                    ])]
            }
            if (!message) {
                message = await channel.send(embed_components);
                json.message_register_id = message;

                fs.writeFileSync('./src/dataBase/bot.json', JSON.stringify(json));
            } else {
                message.edit(embed_components);
            }
        }
        updateRegister()

        function sendHappyBirthday() {
            const today = new Date();

            const users = fs.readdirSync(`./src/dataBase/users`)
            users.forEach(e => {
                let user = JSON.parse(fs.readFileSync(`./src/dataBase/users/${e}`))
                user.state.push(0)
                fs.writeFileSync(`./src/dataBase/users/${e}`, JSON.stringify(user))
            })


            // Check if any of the user's birthdays match today's date
            users.forEach(async userJSON => {
                const user = JSON.parse(fs.readFileSync(`./src/dataBase/users/${userJSON}`))
                console.log(today.getFullYear() + '/' + user.data.happyDate.substring(6, 10));
                console.log(`Date: ` + `${padString(today.getDate())}.${padString(today.getMonth() + 1)} / ${user.data.happyDate.substring(0, 5)}`);

                if (user.data.happyDate.substring(0, 5) === `${padString(today.getDate())}.${padString(today.getMonth() + 1)}`) {
                    const response = await openai.createCompletion({
                        model: "text-davinci-003",
                        prompt: `–¢–≤–æ—è –∑–∞–¥–∞—á–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è ${user.userName} –µ–º—É –∏—Å–ø–æ–ª–Ω—è–µ—Ç—å—Å—è ${today.getFullYear() - user.data.happyDate.substring(6, 10)} –ª–µ—Ç. –¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –¥–∏—Å–∫–æ—Ä–¥ —Å–µ—Ä–≤–µ—Ä–µ —Ç–∞–∫ —á—Ç–æ —Å–¥–µ–ª–∞–π —ç—Ç–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è ${user.userName} —Å–∞–º—ã–º –ª—É—á—à–∏–º. –¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ "–•–ê–ñ–ê–ë–ê", –≥–¥–µ –¥—Ä—É–∑—å—è –æ–±—â–∞—é—Ç—å—Å—è –∏ –∏–≥—Ä–∞—é—Ç –≤ –∏–≥—Ä—ã –º–µ—Å—Ç–µ. –¢–∞–∫ –∂–µ —É –Ω–∞—Å –µ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ ${user.userName} –Ω–∞–ø–∏—Å–∞–ª –æ —Å–µ–±–µ –ø—Ä–∏ —Ä–µ–≥–µ—Å—Ç—Ä–∞—Ü–∏–∏: "${user.data.discription}"(—Ç–∞–º –º–æ–∂–µ—Ç –±—ã—Ç—å —Ö–ª–∞–º). –ú–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å —Ü—ã—Ç–∞—Ç—É(–Ω–∞—á–∏–Ω–∞—è —Å "> "), —Å—Ç–∏—Ö –∏ —Å–∞–º–æ –ø–æ–∑–¥—Ä–∞–≤–ª–Ω–µ–∏–µ`,
                        temperature: 0.9,
                        max_tokens: 2000,
                        top_p: 1,
                        frequency_penalty: 0.0,
                        presence_penalty: 0.6,
                    });
                    client.channels.cache.get('1061912734582718505').send(`@everyone, —Å–µ–≥–æ–¥–Ω—è —É **${user.userName}–∞** –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è! –ï–º—É –∏—Å–ø–æ–ª–Ω–∏–ª–æ—Å—å ${today.getFullYear() - user.data.happyDate.substring(6, 10)} üéÇüéâ\n${response.data.choices[0].text}`).then(message => {
                        message.react('üéÅ');
                    });
                } else if (user.data.happyDate.substring(0, 5) === `${padString(today.getDate() + 1)}.${padString(today.getMonth() + 1)}`) {
                    client.channels.cache.get('1061912734582718505').send(`@everyone, –∑–∞–≤—Ç—Ä–∞ —É **${user.userName}–∞** –±—É–¥–µ—Ç –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏–µ! –ï–º—É –∏—Å–ø–æ–ª–Ω–∏—Ç—å—Å—è ${today.getFullYear() - user.data.happyDate.substring(6, 10)} –ª–µ—Ç üéÅ`).then(message => {
                        message.react('üéÄ');
                    });
                } else if (user.data.happyDate.substring(0, 5) === `${padString(today.getDate() + 3)}.${padString(today.getMonth() + 1)}`) {
                    client.channels.cache.get('1061912734582718505').send(`@everyone, —á–µ—Ä–µ–∑ 3 –¥–Ω—è —É **${user.userName}–∞** –±—É–¥–µ—Ç –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏–µ! –ï–º—É –∏—Å–ø–æ–ª–Ω–∏—Ç—å—Å—è ${today.getFullYear() - user.data.happyDate.substring(6, 10)} –ª–µ—Ç üéÄ`).then(message => {
                        message.react('‚ù§Ô∏è‚Äçüî•');
                    });
                } else if (user.data.happyDate.substring(0, 5) === `${padString(today.getDate() + 7)}.${padString(today.getMonth() + 1)}`) {
                    client.channels.cache.get('1061912734582718505').send(`@everyone, —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é —É **${user.userName}–∞** –±—É–¥–µ—Ç –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏–µ! –ï–º—É –∏—Å–ø–æ–ª–Ω–∏—Ç—å—Å—è ${today.getFullYear() - user.data.happyDate.substring(6, 10)} –ª–µ—Ç üò≤`).then(message => {
                        message.react('ü§öüèª');
                    });
                } else if (user.data.happyDate.substring(0, 5) === `${padString(today.getDate())}.${padString(today.getMonth() + 2)}`) {
                    client.channels.cache.get('1061912734582718505').send(`@everyone, —á–µ—Ä–µ–∑ –º–µ—Å—è—Ü —É **${user.userName}–∞** –±—É–¥–µ—Ç –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏–µ! –ï–º—É –∏—Å–ø–æ–ª–Ω–∏—Ç—å—Å—è ${today.getFullYear() - user.data.happyDate.substring(6, 10)} –ª–µ—Ç üòá`).then(message => {
                        message.react('üëç');
                    });
                }
            });
        };

        const runSendHappyBirthday = () => {
            const today = new Date();

            const botData = JSON.parse(fs.readFileSync('./src/dataBase/bot.json'));

            if (botData.happyCheckDate === undefined || today.toDateString() !== new Date(botData.happyCheckDate).toDateString()) {
                sendHappyBirthday();
                botData.state.push(0)
                botData.happyCheckDate = today;
                fs.writeFileSync('./src/dataBase/bot.json', JSON.stringify(botData));
            }
        }; runSendHappyBirthday()
        setInterval(() => {
            runSendHappyBirthday()
        }, 300000)

        function padString(num) {
            let str = num.toString();
            if (str.length === 1) {
                str = str.padStart(2, "0");
            }
            return str;
        } // 86400000 milliseconds = 24 hours
    },
};

