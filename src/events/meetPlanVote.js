const { StringSelectMenuBuilder } = require('@discordjs/builders');
const { Events, ActionRowBuilder, ButtonStyle, ButtonBuilder } = require('discord.js');
const fs = require('fs');

module.exports = {
    name: 'interactionCreate',

    async execute(interaction) {
        
        if (!interaction.isButton() ) if (!interaction?.values) return;

        if (interaction.customId?.includes('accept_invite')) {
            const plan_id = interaction.customId.split('‚òº')[1];

            if (!fs.existsSync(`./src/dataBase/planMeets/${plan_id}.json`)) {
                interaction.reply({ content: `–ü–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <@${plan_id}> —É–∂–µ –Ω–µ –∞–∫—Ç—É–∞–ª–µ–Ω.`, ephemeral: true });
                return;
            }

            let plan = JSON.parse(fs.readFileSync(`./src/dataBase/planMeets/${plan_id}.json`));

            if (!plan.users_invited.includes(interaction.user.id)) {
                interaction.reply({ content: `–í—ã —É–∂–µ –ø—Ä–∏–Ω—è–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É –∏–ª–∏ –≤–∞—Å –Ω–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Å–∏.`, ephemeral: true });
                return;
            }

            plan.users_declined = plan.users_declined.filter((user) => user !== interaction.user.id);
            plan.users_someone = plan.users_someone.filter((user) => user !== interaction.user.id);
            plan.users_later = plan.users_later.filter((user) => user !== interaction.user.id);
            
            plan.users_accepted.push(interaction.user.id);

            const message = await interaction.channel.messages.fetch(plan.message_id);
            message.thread.send(`üü© <@${interaction.user.id}> —Å–º–æ–∂–µ—Ç –ø—Ä–∏–π—Ç–∏ –≤–æ–≤—Ä–µ–º—è –Ω–∞ –≤—Å—Ç—Ä–µ—á—É.`);

            interaction.reply({ content: `–í—ã –ø—Ä–∏–Ω—è–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É.`, ephemeral: true });

            fs.writeFileSync(`./src/dataBase/planMeets/${plan_id}.json`, JSON.stringify(plan));
        } else if (interaction.customId?.includes('maybe_invite')) {
            const plan_id = interaction.customId.split('‚òº')[1];

            if (!fs.existsSync(`./src/dataBase/planMeets/${plan_id}.json`)) {
                interaction.reply({ content: `–ü–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <@${plan_id}> —É–∂–µ –Ω–µ –∞–∫—Ç—É–∞–ª–µ–Ω.`, ephemeral: true });
                return;
            }

            let plan = JSON.parse(fs.readFileSync(`./src/dataBase/planMeets/${plan_id}.json`));

            if (!plan.users_invited.includes(interaction.user.id)) {
                interaction.reply({ content: `–í–∞—Å –Ω–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Å–∏ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É.`, ephemeral: true });
                return;
            }

            if (plan.users_someone.includes(interaction.user.id)) {
                interaction.reply({ content: `–í—ã —É–∂–µ –≥–æ–≤–æ—Ä–∏–ª–∏ —á—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ –±—É–¥–∏—Ç–µ –Ω–∞ –≤—Å—Ç—Ä–µ—á–µ.`, ephemeral: true });
                return
            }

            plan.users_declined = plan.users_declined.filter((user) => user !== interaction.user.id);
            plan.users_accepted = plan.users_accepted.filter((user) => user !== interaction.user.id);
            plan.users_later = plan.users_later.filter((user) => user !== interaction.user.id);

            plan.users_someone.push(interaction.user.id);

            const message = await interaction.channel.messages.fetch(plan.message_id);
            message.thread.send(`üüß <@${interaction.user.id}> –≤–æ–∑–º–æ–∂–Ω–æ –±—É–¥–µ—Ç –Ω–∞ –≤—Å—Ç—Ä–µ—á–µ.`);

            interaction.reply({ content: `–í—ã –≤–æ–∑–º–æ–∂–Ω–æ –±—É–¥–∏—Ç–µ –Ω–∞ –≤—Å—Ç—Ä–µ—á–µ.`, ephemeral: true });

            fs.writeFileSync(`./src/dataBase/planMeets/${plan_id}.json`, JSON.stringify(plan));
        } else if (interaction.customId?.includes('later_invite')) {
            const plan_id = interaction.customId.split('‚òº')[1];

            if (!fs.existsSync(`./src/dataBase/planMeets/${plan_id}.json`)) {
                interaction.reply({ content: `–ü–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <@${plan_id}> —É–∂–µ –Ω–µ –∞–∫—Ç—É–∞–ª–µ–Ω.`, ephemeral: true });
                return;
            }

            let plan = JSON.parse(fs.readFileSync(`./src/dataBase/planMeets/${plan_id}.json`));

            if (!plan.users_invited.includes(interaction.user.id)) {
                interaction.reply({ content: `–í–∞—Å –Ω–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Å–∏ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É.`, ephemeral: true });
                return;
            }

            if (plan.users_later.includes(interaction.user.id)) {
                interaction.reply({ content: `–í—ã —É–∂–µ –≥–æ–≤–æ—Ä–∏–ª–∏ —á—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ –±—É–¥–∏—Ç–µ –Ω–∞ –≤—Å—Ç—Ä–µ—á–µ.`, ephemeral: true });
                return
            }

            // if not have options send message
            if (!interaction.values) {
                const row = new ActionRowBuilder()
                    .addComponents(
                        new StringSelectMenuBuilder()
                            .setCustomId(`later_invite‚òº${plan_id}`)
                            .setPlaceholder('–ù–∞ —Å–∫–æ–ª—å–∫–æ –≤—ã –∑–∞–¥–µ—Ä–∂–∏—Ç–µ—Å—å?')
                            .addOptions([
                                {
                                    label: `‚ùì –¢–æ—á–Ω–æ –Ω–µ –∑–Ω–∞—é`,
                                    description: `–Ø –Ω–µ –∑–Ω–∞—é —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ —è –±—É–¥—É –∑–∞–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è.`,
                                    value: `–æ–Ω –Ω–µ –∑–Ω–∞–µ—Ç —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –æ–Ω —Å–º–æ–∂–µ—Ç –ø—Ä–∏–π—Ç–∏, –Ω–æ –ø—Ä–∏–¥–µ—Ç`,
                                },
                                {
                                    label: `5 –º–∏–Ω—É—Ç`,
                                    description: `–Ø –ø—Ä–∏–π–¥—É —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç, –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∏.`,
                                    value: `–æ–Ω –±—É–¥–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ \`5 –º–∏–Ω—É—Ç\` –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∏`,
                                },
                                {
                                    label: `10 –º–∏–Ω—É—Ç`,
                                    description: `–Ø –ø—Ä–∏–π–¥—É —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç, –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∏.`,
                                    value: `–æ–Ω –±—É–¥–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ \`10 –º–∏–Ω—É—Ç\` –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∏`,
                                },
                                {
                                    label: `15 –º–∏–Ω—É—Ç`,
                                    description: `–Ø –ø—Ä–∏–π–¥—É —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç, –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∏.`,
                                    value: `–æ–Ω –±—É–¥–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ \`15 –º–∏–Ω—É—Ç\` –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∏`,
                                },
                                {
                                    label: `20 –º–∏–Ω—É—Ç`,
                                    description: `–Ø –ø—Ä–∏–π–¥—É —á–µ—Ä–µ–∑ 20 –º–∏–Ω—É—Ç, –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∏.`,
                                    value: `–æ–Ω –±—É–¥–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ \`20 –º–∏–Ω—É—Ç\` –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∏`,
                                },
                                {
                                    label: `25 –º–∏–Ω—É—Ç`,
                                    description: `–Ø –ø—Ä–∏–π–¥—É —á–µ—Ä–µ–∑ 25 –º–∏–Ω—É—Ç, –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∏.`,
                                    value: `–æ–Ω –±—É–¥–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ \`25 –º–∏–Ω—É—Ç\` –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∏`,
                                },
                                {
                                    label: `30 –º–∏–Ω—É—Ç`,
                                    description: `–Ø –ø—Ä–∏–π–¥—É —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç, –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∏.`,
                                    value: `–æ–Ω –±—É–¥–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ \`30 –º–∏–Ω—É—Ç\` –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∏`,
                                },
                                {
                                    label: `45 –º–∏–Ω—É—Ç`,
                                    description: `–Ø –ø—Ä–∏–π–¥—É —á–µ—Ä–µ–∑ 45 –º–∏–Ω—É—Ç, –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∏.`,
                                    value: `–æ–Ω –±—É–¥–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ \`45 –º–∏–Ω—É—Ç\` –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∏`,
                                },
                                {
                                    label: `1 —á–∞—Å`,
                                    description: `–Ø –ø—Ä–∏–π–¥—É —á–µ—Ä–µ–∑ 1 —á–∞—Å, –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∏.`,
                                    value: `–æ–Ω –±—É–¥–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ \`1 —á–∞—Å\` –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∏`,
                                },
                                {
                                    label: `1 —á–∞—Å 30 –º–∏–Ω—É—Ç`,
                                    description: `–Ø –ø—Ä–∏–π–¥—É —á–µ—Ä–µ–∑ 1 —á–∞—Å 30 –º–∏–Ω—É—Ç, –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∏.`,
                                    value: `–æ–Ω –±—É–¥–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ \`1 —á–∞—Å 30 –º–∏–Ω—É—Ç\` –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∏`,
                                },
                                {
                                    label: `2 —á–∞—Å–∞`,
                                    description: `–Ø –ø—Ä–∏–π–¥—É —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞, –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∏.`,
                                    value: `–æ–Ω –±—É–¥–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ \`2 —á–∞—Å–∞\` –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∏`,
                                },
                            ])
            
                    );
                interaction.reply({ content: `–í—ã–±–∏—Ä–µ—Ç–µ –Ω–∞ —Å–∫–æ–ª—å–∫–æ –≤—ã –∑–∞–¥–µ—Ä–∂–∏—Ç–µ—Å—å –Ω–∞ –≤—Å—Ç—Ä–µ—á—É?`, ephemeral: true, components: [row] });
            } else {
                plan.users_declined = plan.users_declined.filter((user) => user !== interaction.user.id);
                plan.users_accepted = plan.users_accepted.filter((user) => user !== interaction.user.id);
                plan.users_someone = plan.users_someone.filter((user) => user !== interaction.user.id);

                plan.users_later.push(interaction.user.id);
                
                const message = await interaction.channel.messages.fetch(plan.message_id);
                message.thread.send(`üü® <@${interaction.user.id}> –∑–∞–¥–µ—Ä–∂–∏—Ç—å—Å—è –Ω–∞ –≤—Å—Ç—Ä–µ—á—É, ${interaction.values[0]}.`);

                interaction.reply({ content: `–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–ª–∏ —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–π–¥—ë—Ç–µ*(–ø–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å –Ω–µ—Ç—É —Å–º—ã—Å–ª–∞, –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è)*`, ephemeral: true });

                fs.writeFileSync(`./src/dataBase/planMeets/${plan_id}.json`, JSON.stringify(plan));
            }

        } else if (interaction.customId?.includes('not_invite')) {
            const plan_id = interaction.customId.split('‚òº')[1];
            
            if (!fs.existsSync(`./src/dataBase/planMeets/${plan_id}.json`)) {
                interaction.reply({ content: `–ü–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <@${plan_id}> —É–∂–µ –Ω–µ –∞–∫—Ç—É–∞–ª–µ–Ω.`, ephemeral: true });
                return;
            }

            let plan = JSON.parse(fs.readFileSync(`./src/dataBase/planMeets/${plan_id}.json`));

            if (!plan.users_invited.includes(interaction.user.id)) {
                interaction.reply({ content: `–í–∞—Å –Ω–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Å–∏ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É.`, ephemeral: true });
                return;
            }

            if (plan.users_declined.includes(interaction.user.id)) {
                interaction.reply({ content: `–í—ã —É–∂–µ –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –≤—Å—Ç—Ä–µ—á–∏.`, ephemeral: true });
                return
            }

            if (!interaction.values) {
                const row = new ActionRowBuilder()
                    .addComponents(
                        new StringSelectMenuBuilder()
                            .setCustomId(`not_invite‚òº${plan_id}`)
                            .setPlaceholder(`–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞`)
                            .addOptions([
                                {
                                    label: `üê∏ –Ø –∏–¥—É –∏–≥—Ä–∞—Ç—å —Å –¥—Ä—É–≥–∏–º–∏`,
                                    description: `–Ø –Ω–µ —Å–º–æ–≥—É –ø—Ä–∏–π—Ç–∏, —Ç–∞–∫ –∫–∞–∫ –∏–¥—É –∏–≥—Ä–∞—Ç—å —Å –¥—Ä—É–≥–∏–º–∏.`,
                                    value: `\`–Ø –Ω–µ —Å–º–æ–≥—É –ø—Ä–∏–π—Ç–∏, —Ç–∞–∫ –∫–∞–∫ –∏–¥—É –∏–≥—Ä–∞—Ç—å —Å –¥—Ä—É–≥–∏–º–∏.\``,
                                },
                                {
                                    label: `üìÖ –Ø –Ω–µ —Å–º–æ–≥—É –ø—Ä–∏–π—Ç–∏ –≤ —ç—Ç–æ –≤—Ä–µ–º—è`,
                                    description: `–Ø –Ω–µ —Å–º–æ–≥—É –ø—Ä–∏–π—Ç–∏ –≤ —ç—Ç–æ –≤—Ä–µ–º—è.`,
                                    value: `\`–Ø –Ω–µ —Å–º–æ–≥—É –ø—Ä–∏–π—Ç–∏ –≤ —ç—Ç–æ –≤—Ä–µ–º—è.\``,
                                },
                                {
                                    label: `üí• –Ø –Ω–µ —Å–º–æ–≥—É –ø—Ä–∏–π—Ç–∏ –∏–∑-–∑–∞ —Ç–æ–≥–æ —á—Ç–æ –º–æ–π –¥–æ–º —Ä–∞–∑–±–æ–º–±–∏–ª–∏`,
                                    description: `–Ø –Ω–µ —Å–º–æ–≥—É –ø—Ä–∏–π—Ç–∏, —Ç–∞–∫ –∫–∞–∫ –º–æ–π –¥–æ–º —Ä–∞–∑–±–æ–º–±–∏–ª–∏.`,
                                    value: `\`–Ø –Ω–µ —Å–º–æ–≥—É –ø—Ä–∏–π—Ç–∏, —Ç–∞–∫ –∫–∞–∫ –º–æ–π –¥–æ–º —Ä–∞–∑–±–æ–º–±–∏–ª–∏.\``,
                                },
                                {
                                    label: `ü´° –í –¥—Ä—É–≥–æ–π —Ä–∞–∑`,
                                    description: `–Ø –Ω–µ —Å–º–æ–≥—É –ø—Ä–∏–π—Ç–∏, —Ç–∞–∫ –∫–∞–∫ —É –º–µ–Ω—è –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –¥–µ–ª–∞.`,
                                    value: `\`–Ø –Ω–µ —Å–º–æ–≥—É –ø—Ä–∏–π—Ç–∏, —Ç–∞–∫ –∫–∞–∫ —É –º–µ–Ω—è –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –¥–µ–ª–∞.\``,
                                },
                                {
                                    label: `ü´• –°–¥–µ–ª–∞–π –≤—Å—Ç—Ä–µ—á—É –ø–æ–∑–∂–µ`,
                                    description: `–ú–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É –ø–æ–∑–∂–µ. –¢–æ–≥–¥–∞ —è —Å–º–æ–≥—É –ø—Ä–∏–π—Ç–∏.`,
                                    value: `\`–ú–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É –ø–æ–∑–∂–µ. –¢–æ–≥–¥–∞ —è —Å–º–æ–≥—É –ø—Ä–∏–π—Ç–∏.\``,
                                },
                                {
                                    label: `ü´• –°–¥–µ–ª–∞–π—Ç–µ –≤—Å—Ç—Ä–µ—á—É —Ä–∞–Ω—å—à–µ`,
                                    description: `–ú–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É —Ä–∞–Ω—å—à–µ. –¢–æ–≥–¥–∞ —è —Å–º–æ–≥—É –ø—Ä–∏–π—Ç–∏.`,
                                    value: `\`–ú–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É —Ä–∞–Ω—å—à–µ. –¢–æ–≥–¥–∞ —è —Å–º–æ–≥—É –ø—Ä–∏–π—Ç–∏.\``,
                                },
                                {
                                    label: `ü§ê –Ø –Ω–µ —Å–º–æ–≥—É –ø—Ä–∏–π—Ç–∏, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –º–æ–≥—É –≥–æ–≤–æ—Ä–∏—Ç—å`,
                                    description: `–Ø –Ω–µ —Å–º–æ–≥—É –ø—Ä–∏–π—Ç–∏, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –º–æ–≥—É –≥–æ–≤–æ—Ä–∏—Ç—å.`,
                                    value: `\`–Ø –Ω–µ —Å–º–æ–≥—É –ø—Ä–∏–π—Ç–∏, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –º–æ–≥—É –≥–æ–≤–æ—Ä–∏—Ç—å.\``,
                                },
                                {
                                    label: `‚ùì –Ø –Ω–µ –∑–Ω–∞—é`,
                                    description: `–Ø –Ω–µ –∑–Ω–∞—é, –ø–æ—á–µ–º—É —è –Ω–µ —Å–º–æ–≥—É –ø—Ä–∏–π—Ç–∏.`,
                                    value: `\`–Ø –Ω–µ –∑–Ω–∞—é, –ø–æ—á–µ–º—É —è –Ω–µ —Å–º–æ–≥—É –ø—Ä–∏–π—Ç–∏.\``,
                                },
                            ])
                    );

                interaction.reply({ content: `–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞?`, ephemeral: true, components: [row] });
            } else {
                plan.users_later = plan.users_later.filter((user) => user !== interaction.user.id);
                plan.users_someone = plan.users_someone.filter((user) => user !== interaction.user.id);
                plan.users_accepted = plan.users_accepted.filter((user) => user !== interaction.user.id);

                plan.users_declined.push(interaction.user.id);

                const message = await interaction.channel.messages.fetch(plan.message_id);
                message.thread.send(`üü• <@${interaction.user.id}> –Ω–µ —Å–º–æ–∂–µ—Ç –ø—Ä–∏–π—Ç–∏ –ø–æ –ø—Ä–∏—á–∏–Ω–µ ${interaction.values[0]}.`);

                interaction.reply({ content: `–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –≤—Å—Ç—Ä–µ—á–∏.`, ephemeral: true });

                fs.writeFileSync(`./src/dataBase/planMeets/${plan_id}.json`, JSON.stringify(plan));
            }
        } else if (interaction.customId?.includes('add_invite')) {
            let plan_id = interaction.customId.split('‚òº')[1];

            if (!fs.existsSync(`./src/dataBase/planMeets/${plan_id}.json`)) {
                interaction.reply({ content: `–ü–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <@${plan_id}> —É–∂–µ –Ω–µ –∞–∫—Ç—É–∞–ª–µ–Ω.`, ephemeral: true });
                return;
            }

            let plan = JSON.parse(fs.readFileSync(`./src/dataBase/planMeets/${plan_id}.json`));

            if (plan.users_invited.includes(interaction.user.id)) {
                interaction.reply({ content: `–í—ã —É–∂–µ –∏–º–µ–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —Å–æ–±—Ä–∞–Ω–∏–µ.`, ephemeral: true });
                return;
            }

            if (plan.users_requested.includes(interaction.user.id)) {
                interaction.reply({ content: `–í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É –≤ —Å–æ–±—Ä–∞–Ω–∏–µ.`, ephemeral: true });
                return;
            }

            plan.users_requested.push(interaction.user.id);

            const message = await interaction.channel.messages.fetch(plan.message_id);
            message.thread.send({
                content: `ü§ù <@${plan_id}> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø–æ–ø–∞—Å—Ç—å –Ω–∞ –≤—Å—Ç—Ä–µ—á—É! <@${interaction.user.id}> —Ö–æ—á–µ—Ç –ø—Ä–∏–π—Ç–∏ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É.`,
                components: [
                    new ActionRowBuilder()
                        .addComponents(
                            new ButtonBuilder()
                                .setCustomId(`complite_invite‚òº${interaction.user.id}`)
                                .setLabel(`–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å`)
                                .setStyle(ButtonStyle.Success)
                        )
                ]
            });

            interaction.reply({ content: `–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—Ä–µ—á—É.`, ephemeral: true });

            fs.writeFileSync(`./src/dataBase/planMeets/${plan_id}.json`, JSON.stringify(plan));
        } else if (interaction.customId?.includes('complite_invite')) {
            let user_id = interaction.customId.split('‚òº')[1];

            if (!fs.existsSync(`./src/dataBase/planMeets/${interaction.user.id}.json`)) {
                interaction.reply({ content: `–ü–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <@${plan_id}> —É–∂–µ –Ω–µ –∞–∫—Ç—É–∞–ª–µ–Ω.`, ephemeral: true });
                return;
            }

            let plan = JSON.parse(fs.readFileSync(`./src/dataBase/planMeets/${interaction.user.id}.json`));

            if (plan.users_invited.includes(user_id)) {
                interaction.reply({ content: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –ø–æ–¥–∞–ª –∑–∞—è–≤–∫—É, –¶–ï –§–≠–ô–ö!!!.(—É–∂–µ –µ—Å—Ç—å)`, ephemeral: true });
                return;
            }

            plan.users_invited.push(user_id);

            const message = await interaction.channel.messages.fetch(plan.message_id);
            message.thread.send(`ü´±üèø‚Äçü´≤üèø <@${user_id}> –≤–∞—à–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É –ø—Ä–∏–Ω—è—Ç–æ. –í—ã–±–µ—Ä–∏—Ç–µ —Å–º–æ–∂–µ—Ç–µ –ª–∏ –≤—ã –ø—Ä–∏–π—Ç–∏.`);

            interaction.reply({ content: `–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É.`, ephemeral: true });

            fs.writeFileSync(`./src/dataBase/planMeets/${interaction.user.id}.json`, JSON.stringify(plan));
        }
    }
}