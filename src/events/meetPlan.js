const { Events, ActionRowBuilder, ButtonStyle, ButtonBuilder, EmbedBuilder, StringSelectMenuBuilder, Colors, UserSelectMenuBuilder, BaseSelectMenuBuilder } = require('discord.js');
const { get_game_list, check_game_in_list } = require('../functions/listFunc');
const fs = require('fs');
const { RoundTime } = require('../functions/Mthon');
const config = require('../config.json');

module.exports = {
    name: Events.InteractionCreate,

    async execute(interaction) {

        if (!fs.existsSync(`./src/dataBase/users/${interaction.user.id}.json`)) {
            return
        }

        const subcommand = interaction?.options?._subcommand
        let userData = JSON.parse(fs.readFileSync(`./src/dataBase/users/${interaction.user.id}.json`));
        
        if (subcommand === 'plan' || interaction.customId === 'plan_meet_1') {
            let games = await interaction?.options?.get('subject') ? (await interaction.options.get('subject').value).split(',') : get_game_list()
            
            function have_game(game) {
                if (check_game_in_list(interaction.user.id, game) || check_game_in_list(interaction.user.id, game, "!")) {
                    return `üü© –≠—Ç–∞ –∏–≥—Ä–∞ –µ—Å—Ç—å —É —Ç–µ–±—è –≤ —Å–ø–∏—Å–∫–µ`
                } else {
                    return `üü® –≠—Ç–æ–π –∏–≥—Ä—ã –Ω–µ—Ç—É —É —Ç–µ–±—è –≤ —Å–ø–∏—Å–∫–µ`
                }
            }

            let options = games.map(game => {
                return {
                    label: game,
                    description: `${have_game(game)}`,
                    value: game,

                }
            });
            const row = new ActionRowBuilder()
                .addComponents(
                    new StringSelectMenuBuilder()
                        .setCustomId('plan_meet_2')
                        .setPlaceholder('–í—ã–±—Ä–∞—Ç—å –∏–≥—Ä—É/–∏–≥—Ä—ã')
                        .addOptions(options)
                        .setMinValues(1)
                        .setMaxValues(games.length)
                );
            interaction.reply({
                content: `<@${interaction.user.id}> –ù–∞—á–∏–Ω–∞–µ–º!`,
                embeds: [new EmbedBuilder()
                    .setTitle(`üöß –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–∏—è`)
                    .setColor(Colors.Yellow)
                    .setFooter({ text: `–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–∏—è`, iconUrl: interaction.user.avatarURL()})
                    .setDescription(`–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É/–∏–≥—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±—Ä–∞–Ω–∏—è. –í—ã–±–∏—Ä–∞—Ç—å –∏–≥—Ä—ã –∫–æ—Ç–æ—Ä—ã—Ö —É —Ç–µ–±—è –Ω–µ—Ç—É –º–æ–∂–Ω–æ, –Ω–æ –µ—Å–ª–∏ —Ç—ã –≤ –Ω–∏—Ö –º–æ–∂–µ—à—å –∏–≥—Ä–∞—Ç—å –Ω–µ –∑–∞–±—É–¥—å –∏—Ö –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫, —á—Ç–æ –±—ã –Ω–µ —Å–æ–∑–¥–æ–≤–∞—Ç—å –ø—É—Ç–∞–Ω–∏—Ü—ã`)],
                components: [row, new ActionRowBuilder().addComponents([new ButtonBuilder()
                    .setCustomId('stop_create_event')
                    .setLabel('–û—Ç–º–µ–Ω–∞')
                    .setStyle(ButtonStyle.Danger)])
                ]
            });

            userData.planMeet = {
                "id": interaction.user.id,
                "subjects": games,
                "users_invited": [],
                "users_accepted": [],
                "users_later": [],
                "users_someone": [],
                "users_declined": [], // { "id": "id", "reason": "reason"}
                "users_requested": [],
                "type": "time",
                "time": null,
                "message_id": null,
                "ping_30_min": false,
                "ping_5_min": false,
                "emoji": null,
            }

            fs.writeFileSync(`./src/dataBase/users/${interaction.user.id}.json`, JSON.stringify(userData, null, 4))
        } else if ( interaction.customId === 'plan_meet_2' ) {
            let games = interaction.values;

            const users_files = fs.readdirSync('./src/dataBase/users')

            const selectMenu = new ActionRowBuilder().addComponents(
                new UserSelectMenuBuilder()
                    .setCustomId(`plan_meet_3`)
                    .setPlaceholder('–í—ã–±—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
                    .setMaxValues(users_files.length)
                    .setMinValues(1)
            );
            interaction.message.edit({
                content: `<@${interaction.user.id}> –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º..`,
                embeds: [new EmbedBuilder()
                    .setTitle(`üöß –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–∏—è`)
                    .setColor(Colors.Yellow)
                    .setDescription(`–í—ã –≤—ã–±—Ä–∞–ª–∏: \n\`\`\`${games.join(', ')}\`\`\`\n –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–±—Ä–∞–Ω–∏—è. \n\n**–ù–µ–ª—å–∑—è –≤—ã–±–∏—Ä–∞—Ç—å:**\n1) –ë–æ—Ç–æ–≤, —ç—Ç–æ –≤—ã–≤–µ–¥–∏—Ç –æ—à–∏–±–∫—É\n2) –°–µ–±—è, —Ç–æ–∂–µ –æ—à–∏–±–∫–∞\n3) –¢–µ—Ö –∫—Ç–æ –Ω–µ –º–æ–≥—É –±—ã—Ç—å –Ω–∞ —Å–æ–±—Ä–∞–Ω–∏–∏ —Å–µ–π—á–∞—Å`)],
                components: [selectMenu, new ActionRowBuilder().addComponents([new ButtonBuilder()
                    .setCustomId('stop_create_event')
                    .setLabel('–û—Ç–º–µ–Ω–∞')
                    .setStyle(ButtonStyle.Danger)])]
            })
            
            userData.planMeet.subjects = games

            interaction.reply({content: '–ê–≥–∞, –≤–æ—Ç –∫–∞–∫–∏–µ —É —Ç–µ–±—è —Ñ–µ—Ç–∏—à–∏..', ephemeral: true})
            fs.writeFileSync(`./src/dataBase/users/${interaction.user.id}.json`, JSON.stringify(userData, null, 4))
        } else if ( interaction.customId === 'plan_meet_3' ) {
            let users = interaction.values;

            if (users.includes(interaction.user.id)) {
                interaction.reply({content: '–ù–µ–ª—å–∑—è –≤—ã–±–∏—Ä–∞—Ç—å —Å–µ–±—è', ephemeral: true})
                return
            }

            function getOptionsThisDay() {
                let options = []
                
                const date = new Date();
                let hours = date.getHours() + 1
                const minutes = date.getMinutes();

                hours < 10 ? hours = 10 : null;
                if (hours > 21) {
                    options.push({
                        label: `–ü–æ–ø—Ä–æ–±—É–π –∑–∞–≤—Ç—Ä–∞!`,
                        emoji: '<:segodna:1084743616599167026>',
                        description: `–ù–∞ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –Ω–µ–ª—å–∑—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—Ä–∞–Ω–∏–µ`,
                        value: 'error'
                    })
                    return options
                }

                for (let i = hours; i <= 21; i++) {
                    for (let j = 0; j < 60; j += 30) {
                        const time = new Date(date.getFullYear(), date.getMonth(), date.getDate(), i, j).getTime().toString()
                        options.push({
                            label: `–°–µ–≥–æ–¥–Ω—è –≤ ${RoundTime(i)}:${RoundTime(j)}`,
                            emoji: '<:segodna:1084743616599167026>',
                            description: `${RoundTime(i)}:${RoundTime(j)} –ø–æ –ö–∏–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏(–°–µ–π—á–∞—Å ${RoundTime(date.getHours())}:${RoundTime(minutes)})`,
                            // value is tiks
                            value: time
                        })
                    }
                }
                
                return options
            }
            const { RoundTime } = require('../functions/Mthon');
            function getOptionsNextDay() {
                let options = []

                const date = new Date();

                for (let i = 10; i <= 21; i++) {
                    for (let j = 0; j === 30 || j === 0; j += 30) {
                        const time = new Date(date.getFullYear(), date.getMonth(), date.getDate() + 1, i, j).getTime().toString()
                        options.push({
                            label: `–ó–∞–≤—Ç—Ä–∞ –≤ ${RoundTime(i)}:${RoundTime(j)}`,
                            emoji: '<:zavtra:1084744738911031306>',
                            description: `${RoundTime(i)}:${RoundTime(j)} –ø–æ –ö–∏–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏`,
                            // value hours + minutes + date + 1 day
                            value: time
                        })
                    }
                }
                return options
            }
            function getOptionsLastDay() {
                let options = []

                const date = new Date();

                for (let i = 10; i <= 21; i++) {
                    for (let j = 0; j < 60; j += 30) {
                        const time = new Date(date.getFullYear(), date.getMonth(), date.getDate() + 2, i, j).getTime().toString()
                        options.push({
                            label: `–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ –≤ ${RoundTime(i)}:${RoundTime(j)}`,
                            emoji: '<:posle_zavtra:1084744736398639104>',
                            description: `${RoundTime(i)}:${RoundTime(j)} –ø–æ –ö–∏–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏`,
                            // value hours + minutes + date + 2 day
                            value: time
                        })
                    }
                }
                return options
            }
            
            // console.log(getOptionsNextDay());
            // console.log(getOptionsLastDay());

            const thisDay = new ActionRowBuilder().addComponents(
                new StringSelectMenuBuilder()
                    .setCustomId(`plan_meet_4thisDay`)
                    .setPlaceholder('üåà –°–ï–ì–û–î–ù–Ø')
                    .addOptions(
                        getOptionsThisDay()
                    )
            );
            const nextDay = new ActionRowBuilder().addComponents(
                new StringSelectMenuBuilder()
                    .setCustomId(`plan_meet_4nextDay`)
                    .setPlaceholder('üî• –ó–ê–í–¢–†–ê (–ü–æ–ø—É–ª—è—Ä–Ω–æ —É –≥–µ–µ–≤)')
                    .addOptions(
                        getOptionsNextDay()
                    )
            );
            const lastDay = new ActionRowBuilder().addComponents(
                new StringSelectMenuBuilder()
                    .setCustomId(`plan_meet_4lastDay`)
                    .setPlaceholder('ü´• –ü–û–°–õ–ï–ó–ê–í–¢–†–ê')
                    .addOptions(
                        getOptionsLastDay()
                    )
            );
            console.log(nextDay);

            let ping_users = users.map(user => `<@${user}>`).join(', ')

            interaction.message.edit({
                content: `<@${interaction.user.id}> –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º . . .`,
                embeds: [new EmbedBuilder()
                    .setTitle(`üöß –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–∏—è`)
                    .setColor(Colors.Yellow)
                    .setDescription(`–í—ã –≤—ã–±—Ä–∞–ª–∏: ${ping_users}\n –¢–µ–ø–µ—Ä—å –≤—Ä–µ–º—è —Å–æ–±—Ä–∞–Ω–∏—è.`)],
                components: [thisDay, nextDay, lastDay, new ActionRowBuilder().addComponents([
                    new ButtonBuilder()
                        .setCustomId('stop_create_event')
                        .setLabel('–û—Ç–º–µ–Ω–∞')
                        .setStyle(ButtonStyle.Danger),
                    new ButtonBuilder()
                        // .setCustomId('nuked')
                        .setLabel('–ü–£–õ–¨–¢ –û–¢ –Ø–î–ï–†–ö–òüò≤üò≤üëâüèøüëåüèøüí•ü§Øüßëüèøüë∂üèªüßëüèø')
                        .setStyle(ButtonStyle.Link)
                        .setURL('https://www.tiktok.com/@yanti.ez/video/7210349481588526341')
                ])]
            })
            
            userData.planMeet.users_invited = users

            interaction.reply({content: '–ê–≥–∞, –≤–æ—Ç –∫–∞–∫–∏–µ —É —Ç–µ–±—è —Ñ–µ—Ç–∏—à–∏..', ephemeral: true})
            fs.writeFileSync(`./src/dataBase/users/${interaction.user.id}.json`, JSON.stringify(userData, null, 4))
        } else if ( interaction.customId?.includes('plan_meet_4') ) {
            let time = Number(interaction.values[0]);

            let userData = JSON.parse(fs.readFileSync(`./src/dataBase/users/${interaction.user.id}.json`));

            const dateFormPlan = new Date(time);
            const date = new Date();
            const hours = date.getHours();
            const minutes = date.getMinutes();

            let timeToMeet = time - date;

            if (timeToMeet < 0) {
                interaction.reply({content: '–¢—ã –Ω–µ –º–æ–∂–µ—à—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—Ä–∞–Ω–∏–µ –≤ –ø—Ä–æ—à–ª–æ–º! **–ö–æ–Ω—á–∞ –µ–±–∞–Ω–∞—è –Ω–∞—Ö—É–π —Ç—ã –≤–æ–æ–±—â–µ –ø—ã—Ç–∞–ª—Å—è —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å, –≥–Ω–∏–¥–∞ —Å—É–∫–∞ –ø–∏–¥–∞—Ä–∞—Å —É–µ–±–∞–Ω –Ω–µ–≥—Ä –Ω–µ–¥–æ–Ω–æ—à–µ–Ω–∏–π –î–ï–ù–ò–°!!!!!!**', ephemeral: true})
                return
            }

            const timeToMeetInDays = Math.round(timeToMeet / 1000 / 60 / 60 / 24);

            const ping_users = userData.planMeet.users_invited.map(user => `<@${user}>`).join(', ')
            const subjects = userData.planMeet.subjects.join(', ')

            interaction.message.edit({
                content: `<@${interaction.user.id}> –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º , , ,`,
                embeds: [new EmbedBuilder()
                    .setTitle(`üöß –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–∏—è`)
                    .setColor(Colors.Yellow)
                    .setDescription(`–í—ã –≤—ã–±—Ä–∞–ª–∏ —á—Ç–æ —Å–æ–±—Ä–∞–Ω–∏–µ –Ω–∞—á–Ω–µ—Ç—å—Å—è –≤ \`${RoundTime(dateFormPlan.getHours())}:${RoundTime(dateFormPlan.getMinutes())}\` —á–µ—Ä–µ–∑ \`${timeToMeetInDays}\` –¥–Ω–µ–π.\n–î–æ —ç—Ç–æ–≥–æ –≤—ã –≤—ã–±—Ä–∞–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${ping_users}\n–¢–µ–º—ã —Å–æ–±—Ä–∞–Ω–∏—è: \`${subjects}\`\n –í—ã–±–∏—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –Ω–∞—á–∞–ª–∞ —Å–æ–±—Ä–∞–Ω–∏—è.`)],
                components: [new ActionRowBuilder().addComponents([
                    new ButtonBuilder()
                        .setCustomId('plan_meet_5allReady')
                        .setLabel('–ö–æ–≥–¥–∞ –≤—Å–µ –±—É–¥—É—Ç –≥–æ—Ç–æ–≤—ã')
                        .setStyle(ButtonStyle.Success),
                    new ButtonBuilder()
                        .setCustomId('plan_meet_5time')
                        .setLabel(`–†–æ–≤–Ω–æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏`)
                        .setStyle(ButtonStyle.Success),
                    new ButtonBuilder()
                        .setCustomId('plan_meet_5command')
                        .setLabel(`–¢–æ–ª—å–∫–æ –ø–æ –∫–æ–º–∞–Ω–¥–µ /meet start`)
                        .setStyle(ButtonStyle.Success),
                    new ButtonBuilder()
                        .setCustomId('stop_create_event')
                        .setLabel('–û—Ç–º–µ–Ω–∞')
                        .setStyle(ButtonStyle.Danger),
                    new ButtonBuilder()
                        .setCustomId('plan_meet_1')
                        .setLabel('–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—Ä–∞–Ω–∏–µ')
                        .setStyle(ButtonStyle.Danger)
                ])
                ]
            })

            userData.planMeet.time = time
            fs.writeFileSync(`./src/dataBase/users/${interaction.user.id}.json`, JSON.stringify(userData, null, 4))
        } else if ( interaction.customId?.includes('plan_meet_5') ) {
            let userData = JSON.parse(fs.readFileSync(`./src/dataBase/users/${interaction.user.id}.json`));

            const selectButton = interaction.customId.split('plan_meet_5');

            const dateFormPlan = new Date(userData.planMeet.time);
            const date = new Date();

            let timeToMeet = userData.planMeet.time - date;

            const timeToMeetInDays = Math.round(timeToMeet / 1000 / 60 / 60 / 24);

            const ping_users = userData.planMeet.users_invited.map(user => `<@${user}>`).join(', ')
            const subjects = userData.planMeet.subjects.join(', ')
            const button = [
                new ActionRowBuilder().addComponents([
                    new ButtonBuilder()
                        .setCustomId('happy')
                        .setLabel('–ì–æ—Ç–æ–≤–æ!')
                        .setStyle(ButtonStyle.Success)
                        .setDisabled(true)
                ])
            ]

            if (selectButton === 'allReady') {
                userData.planMeet.type = 'allReady'
                interaction.message.edit({
                    content: `<@${interaction.user.id}> –°–æ–±—Ä–∞–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ!`,
                    embeds: [new EmbedBuilder()
                        .setTitle(`üöß –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–∏—è`)
                        .setColor(Colors.Green)
                        .setDescription(`–í—ã –≤—ã–±—Ä–∞–ª–∏ —á—Ç–æ —Å–æ–±—Ä–∞–Ω–∏–µ –Ω–∞—á–Ω–µ—Ç—å—Å—è –≤ \`${RoundTime(dateFormPlan.getHours())}:${RoundTime(dateFormPlan.getMinutes())}\` —á–µ—Ä–µ–∑ (\`${RoundTime(dateFormPlan.getDate())}.${RoundTime(dateFormPlan.getMonth()+1)}\`) –¥.\n–î–æ —ç—Ç–æ–≥–æ –≤—ã –≤—ã–±—Ä–∞–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${ping_users}\n–¢–µ–º—ã —Å–æ–±—Ä–∞–Ω–∏—è: \`${subjects}\`\n–°–æ–±—Ä–∞–Ω–∏–µ –Ω–∞—á–Ω–µ—Ç—å—Å—è –∫–æ–≥–¥–∞ –≤—Å–µ –±—É–¥—É—Ç –≥–æ—Ç–æ–≤—ã(–ø–æ–≥–æ–ª–æ—Å—É—é—Ç, –µ—Å–ª–∏ –ª–æ—Ö–∏ –Ω–µ –≥–æ–ª–æ—Å—É—é—Ç —Ç–æ –º–æ–∂–Ω–æ –∏–ø–æ–ª—å–∑–æ–≤–∞—Ç—å \`/meet start\`).`)],
                        components: button
                })
            } 

            if (selectButton === 'time') {
                userData.planMeet.type = 'time'
                interaction.message.edit({
                    content: `<@${interaction.user.id}> –°–æ–±—Ä–∞–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ!`,
                    embeds: [new EmbedBuilder()
                        .setTitle(`üöß –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–∏—è`)
                        .setColor(Colors.Green)
                        .setDescription(`–í—ã –≤—ã–±—Ä–∞–ª–∏ —á—Ç–æ —Å–æ–±—Ä–∞–Ω–∏–µ –Ω–∞—á–Ω–µ—Ç—å—Å—è –≤ \`${RoundTime(dateFormPlan.getHours())}:${RoundTime(dateFormPlan.getMinutes())}\` —á–µ—Ä–µ–∑ (\`${RoundTime(dateFormPlan.getDate())}.${RoundTime(dateFormPlan.getMonth()+1)}\`) –¥.\n–î–æ —ç—Ç–æ–≥–æ –≤—ã –≤—ã–±—Ä–∞–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${ping_users}\n–¢–µ–º—ã —Å–æ–±—Ä–∞–Ω–∏—è: \`${subjects}\`\n–°–æ–±—Ä–∞–Ω–∏–µ –Ω–∞—á–Ω–µ—Ç—å—Å—è —Ä–æ–≤–Ω–æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏.`)],
                        components: button
                })
            }

            if (selectButton === 'command') {
                userData.planMeet.type = 'command'
                interaction.message.edit({
                    content: `<@${interaction.user.id}> –°–æ–±—Ä–∞–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ!`,
                    embeds: [new EmbedBuilder()
                        .setTitle(`üöß –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–∏—è`)
                        .setColor(Colors.Green)
                        .setDescription(`–í—ã –≤—ã–±—Ä–∞–ª–∏ —á—Ç–æ —Å–æ–±—Ä–∞–Ω–∏–µ –Ω–∞—á–Ω–µ—Ç—å—Å—è –≤ \`${RoundTime(dateFormPlan.getHours())}:${RoundTime(dateFormPlan.getMinutes())}\` (\`${RoundTime(dateFormPlan.getDate())}.${RoundTime(dateFormPlan.getMonth()+1)}\`)\n–î–æ —ç—Ç–æ–≥–æ –≤—ã –≤—ã–±—Ä–∞–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${ping_users}\n–¢–µ–º—ã —Å–æ–±—Ä–∞–Ω–∏—è: \`${subjects}\`\n–°–æ–±—Ä–∞–Ω–∏–µ –Ω–∞—á–Ω–µ—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –ø–æ –∫–æ–º–∞–Ω–¥–µ \`/meet start\`.`)],
                        components: button
                })
            }
            const channel = await interaction.client.channels.cache.get(config.channels_id.meets)

            const message = await channel.send({
                content: `<@${interaction.user.id}> –°–æ–±—Ä–∞–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ! –∏ –ø–æ–∑–≤–∞–ª –≤–∞—Å: ${ping_users}`,
                embeds: [new EmbedBuilder()
                    .setTitle(`üìÖ –ó–∞–ª–ø–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å–æ–±—Ä–∞–Ω–∏–µ`)
                    .setColor(Colors.Yellow)
                    .setDescription(`–°–æ–±—Ä–∞–Ω–∏–µ –Ω–∞—á–Ω–µ—Ç—å—Å—è –≤ \`${RoundTime(dateFormPlan.getHours())}:${RoundTime(dateFormPlan.getMinutes())}\` (\`${RoundTime(dateFormPlan.getDate())}.${RoundTime(dateFormPlan.getMonth()+1)}\`)\n–¢–µ–º—ã —Å–æ–±—Ä–∞–Ω–∏—è: \`${subjects}\`\n–ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏: ${ping_users}\n–ù–∞–∂–º–∏—Ç–µ –≤—ã–±–∏—Ä–∏—Ç–µ —Å–º–æ–∂–µ—Ç–µ –≤—ã –ø—Ä–∏–π—Ç–∏ –∏–ª–∏ –Ω–µ—Ç. __**–≠–¢–û –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û!**__`),
                ],
                components: [
                    new ActionRowBuilder().addComponents([
                        new ButtonBuilder()
                            .setCustomId(`accept_invite‚òº${interaction.user.id}`)
                            .setLabel('–Ø —Å–º–æ–≥—É')
                            .setEmoji('<:9462pepe8:1069747369702338591>')
                            .setStyle(ButtonStyle.Success),
                        new ButtonBuilder()
                            .setCustomId(`maybe_invite‚òº${interaction.user.id}`)
                            .setLabel('–ú–æ–∂–µ—Ç –±—É–¥—É')
                            .setEmoji('<:andIdidntdoanything:1069747362857226350>')
                            .setStyle(ButtonStyle.Primary),
                        new ButtonBuilder()
                            .setCustomId(`later_invite‚òº${interaction.user.id}`)
                            .setEmoji(`<:cool:1069747338077290638>`)
                            .setLabel('–ë—É–¥—É –ø–æ–∑–∂–µ')
                            .setStyle(ButtonStyle.Primary),
                        new ButtonBuilder()
                            .setCustomId(`not_invite‚òº${interaction.user.id}`)
                            .setLabel('–ù–µ —Å–º–æ–≥—É')
                            .setEmoji('<:clown:1069747358688083988>')
                            .setStyle(ButtonStyle.Danger),
                        new ButtonBuilder()
                            .setCustomId(`add_invite‚òº${interaction.user.id}`)
                            .setEmoji(`<:UM:1069747345887080488>`)
                            .setLabel('–î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è')
                            .setStyle(ButtonStyle.Secondary),
                    ])
                ]
            })
            
            // 15 random emojis 
            const emojis = ['üî•', 'üí•', 'ü´°', 'üß®', 'üê∏', 'üê∑', 'üêµ', 'üò∫', 'ü´•', 'üåà', 'üåü', 'üåô', 'üåö', 'üåù']
            const randomEmoji = emojis[Math.floor(Math.random() * emojis.length)]

            // create thread
            const thread = await message.startThread({
                name: `${randomEmoji} –õ–æ–≥–∏ —Å–æ–±—Ä–∞–Ω–∏—è ${userData.userName}`,
                autoArchiveDuration: 60,
            })

            thread.send(`<@${interaction.user.id}> –°–æ–±—Ä–∞–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ! –∏ –ø–æ–∑–≤–∞–ª –≤–∞—Å: ${ping_users}\n–°–æ–±—Ä–∞–Ω–∏–µ –Ω–∞—á–Ω–µ—Ç—å—Å—è –≤ \`${RoundTime(dateFormPlan.getHours())}:${RoundTime(dateFormPlan.getMinutes())}\` (\`${RoundTime(dateFormPlan.getDate())}.${RoundTime(dateFormPlan.getMonth()+1)}\`)\n–¢–µ–º—ã —Å–æ–±—Ä–∞–Ω–∏—è: \`${subjects}\``)
            
            userData.planMeet.message_id = message.id
            userData.planMeet.emoji = randomEmoji
            fs.writeFileSync(`./src/dataBase/users/${interaction.user.id}.json`, JSON.stringify(userData, null, 4))

            // create file in dataBase/planMeets
            fs.writeFileSync(`./src/dataBase/planMeets/${interaction.user.id}.json`, JSON.stringify(userData.planMeet), null, 4)

            interaction.reply({
                content: `–°–æ–±—Ä–∞–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ!`,
                ephemeral: true
            })
            setTimeout(() => {
                interaction.message.delete()
            }, 5000)
        }
    }
}