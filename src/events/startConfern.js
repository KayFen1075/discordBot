const { Events, ButtonStyle, StringSelectMenuBuilder, UserSelectMenuBuilder, Client, ActionRowBuilder, ButtonBuilder, GatewayIntentBits, EmbedBuilder, PermissionsBitField, Permissions, MessageManager, Embed, Collection, Colors, Message } = require('discord.js');

const { execute } = require('./ready');

const { get_game_list, check_game_in_list } = require('../functions/listFunc.js')

module.exports = {
    name: Events.InteractionCreate,

    async execute(interaction) {
        if (interaction.isButton()) {
            if (interaction.customId === 'start_confern_1') {
                    const games = get_game_list();
                    function have_game(game) {
                        if (check_game_in_list(interaction.user.username, game)) {
                            return `üü© –≠—Ç–∞ –∏–≥—Ä–∞ –µ—Å—Ç—å —É —Ç–µ–±—è –≤ —Å–ø–∏—Å–∫–µ`
                        } else {
                            return `üü® –≠—Ç–æ–π –∏–≥—Ä—ã –Ω–µ—Ç—É —É —Ç–µ–±—è –≤ —Å–ø–∏—Å–∫–µ`
                        }
                    }
    
                    let options = games.map(game => {
                        return {
                            label: game,
                            description: `${have_game(game)}`,
                            value: game,
    
                        }
                    });
                    const row = new ActionRowBuilder()
                        .addComponents(
                            new StringSelectMenuBuilder()
                                .setCustomId('start_confern_2')
                                .setPlaceholder('–í—ã–±—Ä–∞—Ç—å –∏–≥—Ä—É/–∏–≥—Ä—ã')
                                .addOptions(options)
                                .setMinValues(1)
                                .setMaxValues(games.length)
                        );
                    interaction.reply({
                        content: `<@${interaction.user.id}> –ù–∞—á–∏–Ω–∞–µ–º!`,
                        tts: true,
                        embeds: [new EmbedBuilder()
                            .setTitle(`üöß –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–∏—è`)
                            .setColor(Colors.Yellow)
                            .setDescription(`–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±—Ä–∞–Ω–∏—è. –í—ã–±–∏—Ä–∞—Ç—å –∏–≥—Ä—ã –∫–æ—Ç–æ—Ä—ã—Ö —É —Ç–µ–±—è –Ω–µ—Ç—É –º–æ–∂–Ω–æ, –Ω–æ –µ—Å–ª–∏ —Ç—ã –≤ –Ω–∏—Ö –º–æ–∂–µ—à—å –∏–≥—Ä–∞—Ç—å –Ω–µ –∑–∞–±—É–¥—å –∏—Ö –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫, —á—Ç–æ –±—ã –Ω–µ —Å–æ–∑–¥–æ–≤–∞—Ç—å –ø—É—Ç–∞–Ω–∏—Ü—ã`)],
                        components: [row, new ActionRowBuilder().addComponents([new ButtonBuilder()
                            .setCustomId('stop_create_event')
                            .setLabel('–û—Ç–º–µ–Ω–∞')
                            .setStyle(ButtonStyle.Danger)])
                        ]
                    });
               
            } else if (interaction.customId === 'stop_create_event') {
                interaction.message.delete();
            }
        } else if (interaction.isStringSelectMenu()) {
            if (interaction.customId === 'start_confern_2') {
                const selectMenu = new ActionRowBuilder().addComponents(
                    new UserSelectMenuBuilder()
                        .setCustomId(`start_confern_3`)
                        .setPlaceholder('–í—ã–±—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
                        .setMaxValues(3)
                        .setMinValues(1)
                );
                interaction.message.edit({
                    content: `<@${interaction.user.id}> –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º..`,
                    embeds: [new EmbedBuilder()
                        .setTitle(`üöß –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–∏—è`)
                        .setColor(Colors.Yellow)
                        .setDescription(`–í—ã –≤—ã–±—Ä–∞–ª–∏: \n\`\`\`${interaction.values}\`\`\`\n –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–±—Ä–∞–Ω–∏—è. \n\n**–ù–µ–ª—å–∑—è –≤—ã–±–∏—Ä–∞—Ç—å:**\n1) –ë–æ—Ç–æ–≤, —ç—Ç–æ –≤—ã–≤–µ–¥–∏—Ç –æ—à–∏–±–∫—É\n2) –°–µ–±—è, —Ç–æ–∂–µ –æ—à–∏–±–∫–∞\n3) –¢–µ—Ö –∫—Ç–æ –Ω–µ –º–æ–≥—É –±—ã—Ç—å –Ω–∞ —Å–æ–±—Ä–∞–Ω–∏–∏ —Å–µ–π—á–∞—Å`)],    
                    tts: true,
                    components: [selectMenu, new ActionRowBuilder().addComponents([new ButtonBuilder()
                        .setCustomId('stop_create_event')
                        .setLabel('–û—Ç–º–µ–Ω–∞')
                        .setStyle(ButtonStyle.Danger)])]
                })
            }
        } else if (interaction.customId === 'start_confern_3') {
            let userList;
            interaction.values.foreach(element => {
                userList += `${interaction.guild.members.cache.get(element).user.username}, `
            });
            interaction.message.edit({
            content: `<@${interaction.user.id}> –ù–∞—á–∏–Ω–∞—é –º–∞—Å—Å–æ–≤—É—é —Å–ø–∞–º –∞—Ç–∞–∫—É`,
            embeds: [new EmbedBuilder()
                .setTitle(`üöß –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–∏—è`)
                .setColor(Colors.Yellow)
                .setDescription(`–í—ã –≤—ã–±—Ä–∞–ª–∏: \n\`\`\`${userList}\`\`\`\n —Å–∫–æ—Ä–æ –Ω–∞—á–Ω—ë—Ç—å—Å—è —Å–æ–±—Ä–∞–Ω–∏–µ`)],    
            tts: true,
            components: [new ActionRowBuilder().addComponents([new ButtonBuilder()
                .setCustomId('stop_create_event')
                .setLabel('–û—Ç–º–µ–Ω–∞')
                .setStyle(ButtonStyle.Danger)])]
        })
    }
    }}