const { SlashCommandBuilder, ChannelType, PermissionsBitField, ActionRowBuilder, StringSelectMenuBuilder, ButtonBuilder, Colors } = require('discord.js')
const { execute } = require('./list')
const fs = require('fs')
const { EmbedBuilder } = require('@discordjs/builders')
const CircularJSON = require('circular-json')
const { fileLog } = require('../functions/logs')

module.exports = {
    data: new SlashCommandBuilder()
    .setName('vote')
    .setDescription('–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è')
    // .addSubcommand(subcommand => subcommand
    //     .setName('end')
    //     .setDescription('–ó–∞–≤–µ—Ä—à–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ')
    // )
    // .addSubcommand(subcommand => subcommand
    //     .setName('list')
    //     .setDescription('–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π –æ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
    // )
    .addSubcommand(subcommand => subcommand
        .setName('create')
        .setDescription('–°–æ–∑–¥–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ')
        .addStringOption(option => option
            .setName('title')
            .setDescription('–°—É—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è')
            .setMinLength(2)
            .setMaxLength(50)
            .setRequired(true)    
        )
        .addStringOption(option => option
            .setName('description')
            .setDescription('–°—É—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–æ–±–∏ –∂ —Ç–µ–º–∞ –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã')
            .setMinLength(2)
            .setMaxLength(999)
            .setRequired(true)    
        )
        .addStringOption(option => option
            .setName('choices')
            .setDescription('–í—ã–±–æ—Ä, –ø–∏—Å–∞—Ç—å —á–µ—Ä–µ–∑ `;`. –ö –ø—Ä–∏–º–µ—Ä—É: –¥–∞;–Ω–µ—Ç;–≤–æ–∑–º–æ–∂–Ω–æ')
            .setMinLength(3)
            .setMaxLength(200)
            .setRequired(true)
        )
        .addStringOption(option => option
            .setName('time')
            .setDescription('–í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è')
            .setRequired(true)
            .setChoices(
                { name: '1 –º–∏–Ω—É—Ç–∞', value: '1m' },
                { name: '5 –º–∏–Ω—É—Ç', value: '5m' },
                { name: '10 –º–∏–Ω—É—Ç', value: '10m' },
                { name: '15 –º–∏–Ω—É—Ç', value: '15m' },
                { name: '30 –º–∏–Ω—É—Ç', value: '30m' },
                { name: '1 —á–∞—Å', value: '1h' },
                { name: '2 —á–∞—Å–∞', value: '2h' },
                { name: '6 —á–∞—Å–∞', value: '6h' },
                { name: '12 —á–∞—Å–æ–≤', value: '12h' },
                { name: '1 –¥–µ–Ω—å', value: '1d' },
                { name: '2 –¥–Ω—è', value: '2d' },
                { name: '3 –¥–Ω—è', value: '3d' },
                { name: '4 –¥–Ω—è', value: '4d' },
                { name: '5 –¥–Ω–µ–π', value: '5d' },
                { name: '6 –¥–Ω–µ–π', value: '6d' },
                { name: '1 –Ω–µ–¥–µ–ª—è', value: '1w' },

            )    
        )
        .addStringOption(option => option
            .setName('color')
            .setDescription('–í—ã–±–µ—Ä–∏ —Ü–≤–µ—Ç –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è(–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–µ–ª—ë–Ω—ã–π)')
            .setRequired(false)    
            .setChoices(
                { name: 'üî¥ –ö—Ä–∞—Å–Ω—ã–π', value: Colors.Red.toString() },
                { name: 'üü¢ –ó–µ–ª–µ–Ω—ã–π', value: Colors.Green.toString() },
                { name: 'üîµ –°–∏–Ω–∏–π', value: Colors.Blue.toString() },
                { name: '‚ö™ –ë–µ–ª—ã–π', value: Colors.White.toString() },
                { name: '‚ö´ –ß–µ—Ä–Ω—ã–π', value: Colors.NotQuiteBlack.toString() },
                { name: 'üü° –ñ–µ–ª—Ç—ã–π', value: Colors.Yellow.toString() },
                { name: 'üü£ –§–∏–æ–ª–µ—Ç–æ–≤—ã–π', value: Colors.Purple.toString() },
                { name: 'üü† –û—Ä–∞–Ω–∂–µ–≤—ã–π', value: Colors.Orange.toString() },
                { name: 'üü§ –ö–æ—Ä–∏—á–Ω–µ–≤—ã–π', value: Colors.Blurple.toString() },
                { name: 'üå∏ –†–æ–∑–æ–≤—ã–π', value: Colors.Purple.toString() }
            
            )
        )
        .addBooleanOption(option => option
            .setName('ping')
            .setDescription('–£–ø–æ–º—è–Ω—É—Ç—å –≤—Å–µ—Ö –∏–ª–∏ –Ω–µ—Ç, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ç–æ–∏—Ç false')
            .setRequired(false)
        )
    ),

    async execute(interaction) {
        let data = JSON.parse(fs.readFileSync('./src/dataBase/bot.json', 'utf8'))

        if (!fs.existsSync(`./src/dataBase/users/${interaction.user.id}.json`)) {
            return
        }

        // check if user created vote
        data.votes.forEach(e => {
            if (e.id == interaction.user.id) {
                interaction.reply({
                    content: '–í—ã —É–∂–µ —Å–æ–∑–¥–∞–ª–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π `/vote end`',
                    ephemeral: true
                })
                return
            }
        })

        let color = 5763719
        let ping = false
        let votes = (await interaction.options.get('choices').value).split(';')
        let components = []
        
        if (interaction.options.get('ping') && interaction.options.get('ping').value == true) {
            ping = `@everyone –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –æ—Ç <@${interaction.user.id}>!`
        } else {
            ping = `–ù–æ–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –æ—Ç <@${interaction.user.id}>!`
        }

        if (votes.length > 5 || votes.length < 2) {
            interaction.reply({
                content: '–ú–∞–∫—Å–∏–º—É–º –º–æ–∂–µ—Ç –±—ã—Ç—å 5 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤',
                ephemeral: true
            })
            return
        }

        votes.forEach(e => {
            components.push(
                new ButtonBuilder()
                    .setCustomId('vote‚Äò'+e+'‚Äò'+interaction.user.id)
                    .setLabel(e)
                    .setStyle('1'),
            )
        })
        
        if (interaction.options.get('color')) {
            color = parseInt((await interaction.options.get('color').value))
        }

        const messageVote = await interaction.channel.send({
            content: `${ping}`,
            embeds: [new EmbedBuilder()
                .setTitle(interaction.options.get('title').value)
                .setDescription(`${interaction.options.get('description').value}\nBy <@${interaction.user.id}>`)
                .setColor(color)
                .setTimestamp(Date.now())],
            components: [
                new ActionRowBuilder()
                    .addComponents(...components)
            ]
        })
        console.log(messageVote);
        interaction.reply({
            content: `–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ! \n **–í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏:**\n **–ù–∞–∑–≤–∞–Ω–∏–µ:** ${interaction.options.get('title').value}\n **–û–ø–∏—Å–∞–Ω–∏–µ:** ${interaction.options.get('description').value}\n **–í–∞—Ä–∏–∞–Ω—Ç—ã:** ${votes.join(', ')}\n **–í—Ä–µ–º—è:** ${interaction.options.get('time').value}\n **–¶–≤–µ—Ç:** ${interaction.options.get('color').value}\n **–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ:** ${interaction.options.get('ping').value}\n **–°–æ–æ–±—â–µ–Ω–∏–µ:** ${messageVote.id}`,
            ephemeral: true
        })

        // add vote to file
        data.votes.push({
            id: interaction.user.id,
            title: interaction.options.get('title').value,
            description: interaction.options.get('description').value,
            choices: votes,
            color: color,
            ping: ping ,
            startVote: Date.now(),
            channel: interaction.channelId,
            message: await messageVote.id,
            votes_users: [], // users who voted objects {id: id, vote: choice}
            time: interaction.options.get('time').value,
        })
        fileLog(`[–°–û–ó–î–ê–ù–û –ì–û–õ–û–°–û–í–ê–ù–ò–ï] ${interaction.user.username}#${interaction.user.discriminator} (${interaction.user.id}) created vote ${interaction.options.get('title').value} in ${interaction.channel.name} (${interaction.channel.id})
–í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏:
–ù–∞–∑–≤–∞–Ω–∏–µ: ${interaction.options.get('title').value}
–û–ø–∏—Å–∞–Ω–∏–µ: ${interaction.options.get('description').value}
–í–∞—Ä–∏–∞–Ω—Ç—ã: ${votes.join(', ')}
–í—Ä–µ–º—è: ${interaction.options.get('time').value}
–¶–≤–µ—Ç: ${color}
–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ${ping}
–°–æ–æ–±—â–µ–Ω–∏–µ: ${messageVote.id}`)
        fs.writeFileSync('./src/dataBase/bot.json', JSON.stringify(data))

    }
}