const { EmbedBuilder } = require('@discordjs/builders');
const { SlashCommandBuilder, Colors, PermissionFlagsBits } = require('discord.js');
const fs = require('fs');
const { giveAdvanced } = require('../functions/giveAdvanced');
const { fileLog } = require('../functions/logs');


module.exports = {
    data: new SlashCommandBuilder()
        .setName('advanced')
        .setDescription('–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è')
        .addSubcommand(subcommand => subcommand
            .setName('create')
            .setDescription('–°–æ–∑–¥–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ')
            .addStringOption(option => option
                .setName('emoji')
                .setDescription('–≠–º–æ–¥–∑–∏')
                .setRequired(true))
            .addStringOption(option => option
                .setName('name')
                .setDescription('–ù–∞–∑–≤–∞–Ω–∏–µ')
                .setRequired(true))
            .addStringOption(option => option
                .setName('description')
                .setDescription('–û–ø–∏—Å–∞–Ω–∏–µ')
                .setRequired(true))
            .addNumberOption(option => option
                .setName('reward')
                .setDescription('–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –æ–ø—ã—Ç–∞')
                .setRequired(true))
            .addStringOption(option => option
                .setName('difficulty')
                .setDescription('–°–ª–æ–∂–Ω–æ—Å—Ç—å')
                .setRequired(true)
                .setChoices(
                    { name: '–õ–µ–≥–∫–æ',      value: `–õ–µ–≥–∫–æ;${Colors.Grey}` },
                    { name: '–°—Ä–µ–¥–Ω–µ',     value: `–°—Ä–µ–¥–Ω–µ;${Colors.Green}` },
                    { name: '–°–ª–æ–∂–Ω–æ',     value: `–°–ª–æ–∂–Ω–æ;${Colors.Purple}` },
                    { name: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ', value: `–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ;${Colors.Yellow}` },
                    { name: '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ', value: `–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ;${Colors.Gold}` },
                ))
        )
        .addSubcommand(subcommand => subcommand
            .setName('delete')
            .setDescription('–£–¥–∞–ª–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ')
            .addStringOption(option => option
                .setName('name')
                .setDescription('–ù–∞–∑–≤–∞–Ω–∏–µ')
                .setRequired(true))
        )
        .addSubcommand(subcommand => subcommand
            .setName('list')
            .setDescription('–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π')
        )
        .addSubcommand(subcommand => subcommand
            .setName('give')
            .setDescription('–í—ã–¥–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ')
            .addUserOption(option => option
                .setName('user')
                .setDescription('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
                .setRequired(true))
            .addStringOption(option => option
                .setName('name')
                .setDescription('–ù–∞–∑–≤–∞–Ω–∏–µ')
                .setRequired(true))
        )
        // .setDefaultMemberPermissions(PermissionFlagsBits.Administrator)
        ,

    async execute(interaction, client) {
        const subcommand = interaction.options.getSubcommand();
        let data = JSON.parse(fs.readFileSync('./src/dataBase/bot.json'));

        //only for users
        if (!fs.existsSync(`./src/dataBase/users/${interaction.user.id}.json`)) {
            return
        }

        // create
        if (subcommand === 'create') {
            //only for admins
            if (!interaction.member.permissions.has(PermissionFlagsBits.Administrator)) {
                interaction.reply({ content: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!', ephemeral: true });
                return
            }

            const emoji = interaction.options.get('emoji').value;
            const name = interaction.options.get('name').value;
            const description = interaction.options.get('description').value;
            const reward = interaction.options.get('reward').value;
            const difficulty = interaction.options.get('difficulty').value;
                    const color = Number(difficulty.split(';')[1])
                    const difficultyName = difficulty.split(';')[0]
            // if (data.advenced.find(x => x.name === name) || data.advenced.find(x => x.emoji === emoji)) {
            //     return interaction.reply({ content: '–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏–ª–∏ —ç–º–æ–¥–∑–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!', ephemeral: true });
            // }

            data.advenced.push({
                emoji: emoji,
                name: name,
                description: description,
                users: [],
                difficulty: difficulty,
                xp: reward
            });

            fs.writeFileSync('./src/dataBase/bot.json', JSON.stringify(data));
            
            const embed = new EmbedBuilder()
                .setTitle(`${emoji} –ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!`)
                .setDescription(`–ë—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: **${name}**\n\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –µ–≥–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–¥–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ:\n\`\`\`js\n${description}\`\`\`–°–ª–æ–∂–Ω–æ—Å—Ç—å: \`${difficultyName}\``)
                .setColor(color)
                .setTimestamp(Date.now())

            interaction.reply({ content: '@here, –Ω–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!', embeds: [embed] });
            fileLog(`[ADVENCED] –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ! (–ù–∞–∑–≤–∞–Ω–∏–µ: ${name}, –≠–º–æ–¥–∑–∏: ${emoji}, –û–ø–∏—Å–∞–Ω–∏–µ: ${description}, –¶–≤–µ—Ç: ${color}, –°–ª–æ–∂–Ω–æ—Å—Ç—å: ${difficultyName}) `);
        }
        
        // delete
        else if (subcommand === 'delete') {

            //only for admins
            if (!interaction.member.permissions.has(PermissionFlagsBits.Administrator)) {
                interaction.reply({ content: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!', ephemeral: true });
                return
            }

            const name = interaction.options.get('name').value;
            
            if (!data.advenced.find(x => x.name.toLowerCase() === name.toLowerCase())) {
                return interaction.reply({ content: '–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!', ephemeral: true });
            }

            data.advenced.splice(data.advenced.findIndex(x => x.name === name), 1);

            fs.writeFileSync('./src/dataBase/bot.json', JSON.stringify(data));
            interaction.reply({ content: '–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!', ephemeral: true });
            fileLog(`[ADVENCED] –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ! (–ù–∞–∑–≤–∞–Ω–∏–µ: ${name})`);
        }
        
        // list 
        else if (subcommand === 'list') {
            if (data.advenced.length === 0) {
                interaction.reply({ content: '–î–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç—É –∏–ª–∏ –∞–¥–º–∏–Ω –ª–æ—Ö', ephemeral: true });
                return;
            }

            let fileds = [];
            data.advenced.forEach(e => {
                let users = [];
                e.users.forEach(u => {
                    users.push(`<@${u}>`);
                });
                fileds.push({
                    name: `${e.emoji} ${e.name}`,
                    value: `\`\`\`${e.description}\`\`\`–°–ª–æ–∂–Ω–æ—Å—Ç—å: \`${e.difficulty.split(';')[0]}\` –ù–∞–≥—Ä–∞–¥–∞: \`${e.xp}xp\`\n–ü–æ–ª—É—á–∏–ª–∏: ${users.join(', ')}`,
                    inline: false
                });
            });

            let embed = new EmbedBuilder()
                .setTitle('üèÖ –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π')
                .setDescription('–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.')
                .setColor(Colors.Green)
                .addFields(fileds)

            interaction.reply({ content: `–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:`, embeds: [embed], ephemeral: true });
        }

        // give
        else if (subcommand === 'give') {

            
            const user = interaction.options.get('user').value;
            const name = interaction.options.get('name').value;
            
            giveAdvanced(interaction.client, name, user);

            // if (!data.advenced.find(x => x.name.toLowerCase() === name.toLowerCase())) {
            //     return interaction.reply({ content: '–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!', ephemeral: true });
            // }

            // if (data.advenced.find(x => x.name.toLowerCase() === name.toLowerCase()).users.find(x => x === user)) {
            //     return interaction.reply({ content: '–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–ª—É—á–∏–ª —ç—Ç–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!', ephemeral: true });
            // }

            // data.advenced.find(x => x.name.toLowerCase() === name.toLowerCase()).users.push(user);

            // fs.writeFileSync('./src/dataBase/bot.json', JSON.stringify(data));
            // interaction.reply({ content: '–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–æ!', ephemeral: true });
            // fileLog(`[ADVENCED] –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–æ! (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user}, –ù–∞–∑–≤–∞–Ω–∏–µ: ${name})`);
        }
    }
}