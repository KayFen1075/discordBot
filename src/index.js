const fs = require('fs');
const dotenv = require('dotenv');
const path = require('node:path');
dotenv.config();
const { Events, Client, ActionRowBuilder, ButtonBuilder, GatewayIntentBits, EmbedBuilder, PermissionsBitField, Permissions, MessageManager, Embed, Collection, Colors, Message } = require('discord.js');
const { Configuration, OpenAIApi } = require("openai");

const configuration = new Configuration({
  apiKey: '',
});
const openai = new OpenAIApi(configuration);

const { game_table } = require('./functions/listFunc.js')


const { token } = require('./config.json');
const { channel } = require('diagnostics_channel');
const { request } = require('http');
const { time } = require('console');
const client = new Client({
    intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages, GatewayIntentBits.MessageContent]
});

client.on('messageCreate', async message => {
    
    // If the message is not from a bot, generate a response with ChatGPT
    if (!message.author.bot && message.channelId === '1067154510000160900') {
        const waitMessage = await message.channel.send({ content: '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å..' })
        const response = await openai.createCompletion({
            model: "text-davinci-003",
            prompt: `–ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –ø–æ–º–æ—â–Ω–∏–∫–æ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞. –¢–∞–∫ –∂–µ –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–∏—Å–∫–æ—Ä–¥ —Å–µ—Ä–≤–µ—Ä–µ "–•–ê–ñ–ê–ë–ê", –µ–≥–æ —Ä–æ–ª—å –ø–æ–º–æ–≥–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º. –¢–∞–∫ –∫–∞–∫ —ç—Ç–æ –¥–∏—Å–∫–æ—Ä–¥, —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ –ø–∏—Å–∞—Ç—å –∫–∞–∫ –≤ –¥–∏—Å–∫–æ—Ä–¥–µ, —Ç–æ–±–∏–∂ –∫–æ–¥ –Ω–∞–¥–æ –ø–∏—Å–∞—Ç—å –≤ \`\`\`Code type\nCode\`\`\` –∏ —Ç.–¥. –ï—â—ë –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–≤–æ–µ–π —Ä–æ–±–æ—Ç–µ, —Ç–µ–±—è –∑–æ–≤—É—Ç "–ö–∞–π–§—ç–Ω", —Ç—ã –¥–æ–ª–∂–µ–Ω –≤ –Ω–∞—á–∞–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Å—Ç–∞–≤–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–º–∞–π–ª–∏–∫. –ù–µ–º–Ω–æ–≥–æ –ø—Ä–æ —Å–µ—Ä–≤–µ—Ä "–•–ê–ñ–ê–ë–ê", —ç—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –≤ –¥–∏—Å–∫–æ—Ä–¥–µ –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª —Å–æ–∑–¥–∞–Ω –¥–ª—è –æ–±—â–µ–Ω–∏—è –∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±—Ä–∞–Ω–∏–π. –ï–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª: –°–æ–∑–¥–∞–≤–∞—Ç—å —Å–ø–∏—Å–∫–∏, –ò—Å–∫–∞—Ç—å –∏–≥—Ä—ã –≤ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø–æ–∏–≥—Ä–∞—Ç—å, —Ä–∞–∑–ª–∏—á–Ω—ã–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏, —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ. –ù–µ –∑–∞–±—ã–≤–∞–π —Å—Ç–∞–≤–∏—Ç—å —Å–º–∞–π–ª–∏–∫–∏! –ï—â—ë —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ –¥–∞–≤–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –∏ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≥–æ–≤–æ—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–Ω—è—Ç–Ω—ã–π –∫–æ—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç \n\n–ß–µ–ª–æ–≤–µ–∫: –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –∫—Ç–æ –≤—ã?\nAI: üòò –Ø –ò–ò, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ö–µ–≤–∏. –ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å–µ–≥–æ–¥–Ω—è? \n\n –ß–µ–ª–æ–≤–µ–∫: ${message.content}\nAI:`,
            temperature: 0.9,
            max_tokens: 150,
            top_p: 1,
            frequency_penalty: 0.0,
            presence_penalty: 0.6,
            stop: [" –ß–µ–ª–æ–≤–µ–∫:", " AI:"],
          });
        await message.reply(`${response.data.choices[0].text}`)
        await waitMessage.edit({ content: '–ì–æ—Ç–æ–≤–æ!' })
        setTimeout(async () => {
            await waitMessage.delete()
        }, 2000);

    }
});

client.commands = new Collection();

client.once(Events.ClientReady, c => {
	console.log(`Ready! Logged in as ${c.user.tag}`);
});

const commandsPath = path.join(__dirname, 'commands');
const commandFiles = fs.readdirSync(commandsPath).filter(file => file.endsWith('.js'));

for (const file of commandFiles) {
	const filePath = path.join(commandsPath, file);
	const command = require(filePath);
	// Set a new item in the Collection with the key as the command name and the value as the exported module
	if ('data' in command && 'execute' in command) {
		client.commands.set(command.data.name, command);
	} else {
		console.log(`[WARNING] The command at ${filePath} is missing a required "data" or "execute" property.`);
	}
}

client.on(Events.InteractionCreate, async interaction => {
	if (!interaction.isChatInputCommand()) return;

	const command = interaction.client.commands.get(interaction.commandName);

	if (!command) {
		console.error(`–ö–æ–º–∞–Ω–¥–∞ ${interaction.commandName} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
		return;
	}

	try {
		await command.execute(interaction);
	} catch (error) {
		console.error(error);
		await interaction.reply({ content: `–ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\`\`\`${error}\`\`\``, ephemeral: true });
	}
});





client.on('interactionCreate', async (interaction) =>{
    const json = JSON.parse(fs.readFileSync('./src/dataBase/bot.json'));
    const messageId = json.message_list_id;
    let channel = await client.channels.cache.get("1061827241031508121");
    let message = await channel.messages.fetch(messageId.id).catch(err => {
        console.error(err);
    });
    if (interaction.customId === 'remove_pc_games') {
        let bot = JSON.parse(fs.readFileSync(`./src/dataBase/bot.json`, 'utf-8'));

        let userr = JSON.parse(fs.readFileSync(`./src/dataBase/users/${interaction.user.username}.json`, 'utf-8'));
        let filteredArray = userr.data.games.filter(x => !interaction.values.includes(x.trim()));
        userr.data.games = filteredArray;

        const userData = JSON.stringify(userr);

        await interaction.reply({content: `–£–¥–∞–ª–µ–Ω–Ω–æ: \`${interaction.values}\`, —Ç–µ–ø–µ—Ä—å —É —Ç–µ–±—è —Ç–∞–∫–∏–µ –∏–≥—Ä—ã: \`${filteredArray}\``, ephemeral: true})
        fs.writeFileSync(`./src/dataBase/users/${interaction.user.username}.json`, userData)
        
        bot.list_history = [`-üî¥ ${userr.userName} —É–¥–∞–ª–∏–ª –∏–∑ —Å–ø–∏—Å–∫–∞ ${interaction.values} (PC)\n`,bot.list_history[0],bot.list_history[1],bot.list_history[2],bot.list_history[3]]
        fs.writeFileSync(`./src/dataBase/bot.json`, JSON.stringify(bot))
        interaction.message.delete()

        message.thread.send({ 
            content: `${userr.userName} —É–¥–∞–ª–∏–ª –∏–≥—Ä—É`,
            embeds: [ new EmbedBuilder()
                .setTitle('üî¥ –£–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä—ã (PC)')
                .setColor(Colors.Red)
                .setDescription(`**${userr.userName}** —É–¥–∞–ª–∏–ª –∏–∑ —Å–ø–∏—Å–∫–∞ \`${interaction.values}\`(PC), –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —É –Ω–µ–≥–æ —Ç–∞–∫–∏–µ –∏–≥—Ä—ã:\n\`\`\`${userr.data.games}\`\`\``)
                .setTimestamp(Date.now())
            ] })

    } else if (interaction.customId === 'remove_android_games') {
        let bot = JSON.parse(fs.readFileSync(`./src/dataBase/bot.json`, 'utf-8'));

        let userr = JSON.parse(fs.readFileSync(`./src/dataBase/users/${interaction.user.username}.json`, 'utf-8'));
        let filteredArray = userr.data.android_games.filter(x => !interaction.values.includes(x));
        userr.data.android_games = filteredArray;

        const userData = JSON.stringify(userr);

        await interaction.reply({content: `–£–¥–∞–ª–µ–Ω–Ω–æ: \`${interaction.values}\`, —Ç–µ–ø–µ—Ä—å —É —Ç–µ–±—è —Ç–∞–∫–∏–µ –∏–≥—Ä—ã: \`${filteredArray}\``, ephemeral: true})
        fs.writeFileSync(`./src/dataBase/users/${interaction.user.username}.json`, userData)
        
        bot.list_history = [`-üî¥ ${userr.userName} —É–¥–∞–ª–∏–ª –∏–∑ —Å–ø–∏—Å–∫–∞ ${interaction.values} (Android)\n`,bot.list_history[0],bot.list_history[1],bot.list_history[2],bot.list_history[3]]
        fs.writeFileSync(`./src/dataBase/bot.json`, JSON.stringify(bot))
        interaction.message.delete()

        message.thread.send({ 
            content: `${userr.userName} —É–¥–∞–ª–∏–ª –∏–≥—Ä—É`,
            embeds: [ new EmbedBuilder()
                .setTitle('üî¥ –£–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä—ã (Android)')
                .setColor(Colors.Red)
                .setDescription(`**${userr.userName}** —É–¥–∞–ª–∏–ª –∏–∑ —Å–ø–∏—Å–∫–∞ \`${interaction.values}\`(Android), –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —É –Ω–µ–≥–æ —Ç–∞–∫–∏–µ –∏–≥—Ä—ã:\n\`\`\`${userr.data.android_games}\`\`\``)
                .setTimestamp(Date.now())
            ] })
    }
    await updateList()
})
console.log(game_table);
client.on('ready', ()=>{
    updateList()
})

client.login(token)

async function updateList() {
    const json = JSON.parse(fs.readFileSync('./src/dataBase/bot.json'));
    const messageId = json.message_list_id;
    let channel = await client.channels.cache.get("1061827241031508121");
    let message = await channel.messages.fetch(messageId.id).catch(err => {
        console.error(err);
    });
    const embed_components = {
        embeds: [new EmbedBuilder()
            .setTitle('üìú –°–ø–∏—Å–æ–∫ –∏–≥—Ä')
            .setDescription(`–°–ø–∏—Å–æ–∫ –∏–≥—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n${game_table()}\n–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∫–∞–∂–¥—ã–π —Ä–∞–∑ –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å —Å–ø–∏—Å–∫–∞–º–∏. –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ <#1060755559231524954>`)
            .setColor(Colors.Green)
            .setTimestamp(Date.now())], components: [new ActionRowBuilder()
                .addComponents([
                    new ButtonBuilder()
                        .setCustomId('start_confern_1')
                        .setLabel('üöÄ –ù–∞—á–∞—Ç—å —Å–æ–±—Ä–∞–Ω–∏–µ')
                        .setStyle('3'),
                    new ButtonBuilder()
                        .setCustomId('plan_confern_1')
                        .setDisabled(true)
                        .setLabel('‚è≥ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—Ä–∞–Ω–∏–µ')
                        .setStyle('1'),
                    new ButtonBuilder()
                        .setCustomId('photo_confern')
                        .setDisabled(true)
                        .setLabel('üì∏ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ')
                        .setStyle('1')
                ])]
    }
    if (!message) {
        message = await channel.send(embed_components);
        json.message_list_id = message;

        fs.writeFileSync('./src/dataBase/bot.json', JSON.stringify(json));
        await message.startThread({
            name: 'üìô List logs',
            autoArchiveDuration: 60,
            reason: '–õ–æ–≥–∏ —Å–ø–∏—Å–∫–∞, –ø—Ä–æ—Å—å–±–∞ —Å—é–¥–∞ –Ω–µ –ø–∏—Å–∞—Ç—å.\n\nüü¢ - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫\nüî¥ - –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞',
        });
        await message.thread.send('–ù–∞—á–∞–ª–æ –ª–æ–≥–æ–≤!')
    } else {
        message.edit(embed_components);
    }
}

